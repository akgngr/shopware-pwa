var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// packages/composables/src/index.ts
var src_exports = {};
__export(src_exports, {
  INTERCEPTOR_KEYS: () => INTERCEPTOR_KEYS,
  ShopwareVuePlugin: () => ShopwareVuePlugin,
  createListingComposable: () => createListingComposable,
  createShopware: () => createShopware,
  extendScopeContext: () => extendScopeContext,
  getApplicationContext: () => getApplicationContext,
  getDefaultApiParams: () => getDefaultApiParams,
  useAddToCart: () => useAddToCart,
  useBreadcrumbs: () => useBreadcrumbs,
  useCart: () => useCart,
  useCartItem: () => useCartItem,
  useCheckout: () => useCheckout,
  useCms: () => useCms,
  useCountries: () => useCountries,
  useCountry: () => useCountry,
  useCurrency: () => useCurrency,
  useCustomerAddresses: () => useCustomerAddresses,
  useCustomerOrders: () => useCustomerOrders,
  useCustomerPassword: () => useCustomerPassword,
  useDefaults: () => useDefaults,
  useIntercept: () => useIntercept,
  useListing: () => useListing2,
  useNavigation: () => useNavigation,
  useNotifications: () => useNotifications,
  useOrderDetails: () => useOrderDetails2,
  useProduct: () => useProduct,
  useProductAssociations: () => useProductAssociations,
  useProductConfigurator: () => useProductConfigurator,
  useProductQuickSearch: () => useProductQuickSearch2,
  useProductReviews: () => useProductReviews2,
  useSalutations: () => useSalutations,
  useSessionContext: () => useSessionContext,
  useSharedState: () => useSharedState,
  useUIState: () => useUIState,
  useUser: () => useUser,
  useVueContext: () => useVueContext,
  useWishlist: () => useWishlist
});
module.exports = __toCommonJS(src_exports);
var import_vue_demi33 = require("vue-demi");

// packages/composables/src/devtools/plugin.ts
var import_devtools_api = require("@vue/devtools-api");
var import_vue_demi = require("vue-demi");
var TIMELINE_EVENT_LAYER_ID = "shopware:events";
var INSPECTOR_ID = "shopware";
var shopwareSymbol = Symbol("shopware");
function registerShopwareDevtools(app, shopwarePluginInstance) {
  let devtoolsApi;
  let trackId = 0;
  let currentSharedState = null;
  (0, import_devtools_api.setupDevtoolsPlugin)({
    id: "shopware-pwa",
    label: "Shopware PWA",
    logo: "https://shopware.com/media/unknown/2d/80/8c/shopware_signet_blue.svg",
    packageName: "shopware-pwa",
    homepage: "shopware.com",
    app,
    enableEarlyProxy: true
  }, (api) => {
    devtoolsApi = api;
    api.addTimelineLayer({
      id: TIMELINE_EVENT_LAYER_ID,
      label: `Shopware PWA`,
      color: 1613567
    });
    api.addInspector({
      id: INSPECTOR_ID,
      label: "Shopware PWA",
      icon: "shopping_cart"
    });
    api.on.getInspectorTree((payload) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
        payload.rootNodes = [
          {
            id: "shared-state",
            label: "Shared state"
          },
          {
            id: "interceptors",
            label: "Interceptors"
          },
          {
            id: "api-client",
            label: "API client"
          },
          {
            id: "api-defaults",
            label: "API defaults"
          }
        ];
      }
    });
    function displayState(state) {
      if (!state)
        return null;
      const res = {};
      Object.keys(state).forEach((refKey) => {
        res[refKey] = (0, import_vue_demi.unref)(currentSharedState[refKey]);
      });
      return res;
    }
    api.on.getInspectorState((payload) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
        switch (payload.nodeId) {
          case "api-client":
            payload.state = {
              config: shopwarePluginInstance.apiInstance.config
            };
            break;
          case "shared-state":
            payload.state = {
              store: displayState(currentSharedState) || shopwarePluginInstance.state.sharedStore || payload.app.$sharedStore
            };
            break;
          case "interceptors":
            payload.state = {
              registered: shopwarePluginInstance.state.interceptors
            };
            break;
          case "api-defaults":
            payload.state = shopwarePluginInstance.state.shopwareDefaults;
            break;
          default:
            payload.state = {};
            break;
        }
      }
    });
  });
  const devtools = {
    trackEvent: (label, params) => {
      const groupId = "track" + trackId++;
      const log = (label2, params2) => {
        devtoolsApi.addTimelineEvent({
          layerId: TIMELINE_EVENT_LAYER_ID,
          event: {
            time: Date.now(),
            data: {
              label: label2,
              params: params2
            },
            title: label2,
            groupId
          }
        });
      };
      log(label, params);
      return {
        log
      };
    },
    log: (label, params) => {
      devtoolsApi.addTimelineEvent({
        layerId: TIMELINE_EVENT_LAYER_ID,
        event: {
          time: Date.now(),
          data: {
            label,
            params
          },
          title: label
        }
      });
    },
    warning: (label, params) => {
      devtoolsApi.addTimelineEvent({
        layerId: TIMELINE_EVENT_LAYER_ID,
        event: {
          time: Date.now(),
          data: {
            label,
            params
          },
          title: label,
          logType: "warning"
        }
      });
    },
    error: (label, params) => {
      devtoolsApi.addTimelineEvent({
        layerId: TIMELINE_EVENT_LAYER_ID,
        event: {
          time: Date.now(),
          data: {
            label,
            params
          },
          title: label,
          logType: "error"
        }
      });
    },
    _internal: {
      updateSharedState: (state) => {
        currentSharedState = state;
        devtoolsApi.sendInspectorState(INSPECTOR_ID);
      }
    }
  };
  return devtools;
}

// packages/composables/src/hooks/useCms/index.ts
var import_vue_demi2 = require("vue-demi");
var import_shopware_6_client = require("@shopware-pwa/shopware-6-client");
var import_helpers = require("@shopware-pwa/helpers");
var import_merge = __toESM(require("lodash/merge"));
function useCms(params) {
  const COMPOSABLE_NAME = "useCms";
  const { isVueComponent } = useVueContext();
  const cmsContext = (params == null ? void 0 : params.cmsContextName) || isVueComponent && (0, import_vue_demi2.inject)("swCmsContext", null);
  isVueComponent && (0, import_vue_demi2.provide)("swCmsContext", cmsContext);
  const contextName = COMPOSABLE_NAME;
  const { apiInstance } = getApplicationContext({ contextName });
  const cacheKey = cmsContext ? `${contextName}(cms-${cmsContext})` : contextName;
  const { sharedRef } = useSharedState();
  const _searchPath = sharedRef(`${cacheKey}-searchPath`);
  const _cmsError = sharedRef(`${cacheKey}-cmsError`, null);
  const _cmsLoading = sharedRef(`${cacheKey}-cmsLoading`, false);
  const _storePage = sharedRef(`${cacheKey}-page`);
  const { getDefaults } = useDefaults({ defaultsKey: COMPOSABLE_NAME });
  const { setBreadcrumbs } = useBreadcrumbs();
  const page = (0, import_vue_demi2.computed)(() => _storePage.value);
  const resourceIdentifier = (0, import_vue_demi2.computed)(() => {
    var _a;
    return ((_a = page.value) == null ? void 0 : _a.resourceIdentifier) || null;
  });
  const getEntityObject = (0, import_vue_demi2.computed)(() => (0, import_helpers.getCmsEntityByType)((0, import_vue_demi2.unref)(_storePage)) || {});
  const pageTitle = (0, import_vue_demi2.computed)(() => {
    var _a;
    return (_a = getEntityObject.value.translated) == null ? void 0 : _a.name;
  });
  const metaTitle = (0, import_vue_demi2.computed)(() => {
    var _a;
    return (_a = getEntityObject.value.translated) == null ? void 0 : _a.metaTitle;
  });
  const metaDescription = (0, import_vue_demi2.computed)(() => {
    var _a;
    return (_a = getEntityObject.value.translated) == null ? void 0 : _a.metaDescription;
  });
  const metaKeywords = (0, import_vue_demi2.computed)(() => {
    var _a;
    return (_a = getEntityObject.value.translated) == null ? void 0 : _a.keywords;
  });
  const search = (path, query) => __async(this, null, function* () {
    _cmsLoading.value = true;
    _cmsError.value = null;
    _searchPath.value = path;
    const criteria = (0, import_helpers._parseUrlQuery)(query);
    const searchCriteria = (0, import_merge.default)({}, getDefaults(), criteria);
    try {
      const result = yield (0, import_shopware_6_client.getCmsPage)(path, searchCriteria, apiInstance);
      _storePage.value = result;
      (result == null ? void 0 : result.breadcrumb) && setBreadcrumbs(Object.values(result.breadcrumb));
    } catch (e) {
      const err = e;
      _cmsError.value = err;
      _storePage.value = null;
    } finally {
      _cmsLoading.value = false;
    }
  });
  return {
    page,
    loading: (0, import_vue_demi2.computed)(() => _cmsLoading.value || false),
    search,
    currentSearchPathKey: (0, import_vue_demi2.computed)(() => _searchPath.value),
    error: (0, import_vue_demi2.computed)(() => _cmsError.value),
    resourceType: (0, import_vue_demi2.computed)(() => {
      var _a;
      return ((_a = page.value) == null ? void 0 : _a.resourceType) || null;
    }),
    resourceIdentifier,
    metaTitle,
    metaDescription,
    metaKeywords,
    pageTitle
  };
}

// packages/composables/src/hooks/useProduct/index.ts
var import_vue_demi3 = require("vue-demi");
var import_shopware_6_client2 = require("@shopware-pwa/shopware-6-client");
var NO_PRODUCT_REFERENCE_ERROR = "Associations cannot be loaded for undefined product";
function useProduct(params) {
  const COMPOSABLE_NAME = "useProduct";
  const contextName = COMPOSABLE_NAME;
  const { apiInstance } = getApplicationContext({ contextName });
  const { getAssociationsConfig, getIncludesConfig } = useDefaults({
    defaultsKey: contextName
  });
  const loading = (0, import_vue_demi3.ref)(false);
  const product = (0, import_vue_demi3.ref)((0, import_vue_demi3.unref)(params == null ? void 0 : params.product) || null);
  const error = (0, import_vue_demi3.ref)(null);
  const loadAssociations = () => __async(this, null, function* () {
    var _a;
    if (!product || !product.value || !product.value.id) {
      throw NO_PRODUCT_REFERENCE_ERROR;
    }
    const searchCriteria = {
      includes: getIncludesConfig(),
      associations: getAssociationsConfig()
    };
    const urlPath = `detail/${product.value.parentId || product.value.id}`;
    const result = yield (0, import_shopware_6_client2.getCmsPage)(urlPath, searchCriteria, apiInstance);
    product.value = Object.assign({}, product.value, {
      crossSellings: (_a = result.product) == null ? void 0 : _a.crossSellings
    });
  });
  const search = (productId) => __async(this, null, function* () {
    loading.value = true;
    try {
      const result = yield (0, import_shopware_6_client2.getProduct)(productId, null, apiInstance);
      product.value = result == null ? void 0 : result.product;
      return result;
    } catch (e) {
      const err = e;
      error.value = err.messages;
    } finally {
      loading.value = false;
    }
  });
  return {
    product,
    loading,
    search,
    error,
    loadAssociations
  };
}

// packages/composables/src/hooks/useCart/index.ts
var import_vue_demi4 = require("vue-demi");
var import_shopware_6_client3 = require("@shopware-pwa/shopware-6-client");

// packages/commons/src/warning.ts
function warning({
  packageName,
  methodName,
  notes
}) {
  process.env.NODE_ENV !== "production" && console.warn(`[WARNING][@shopware-pwa/${packageName}][${methodName}]: ${notes}`);
}

// packages/commons/compatibility.json
var shopwareApiVersion = "6.4";
var instances = {
  "6.3": {
    domain: "https://pwa-demo-api.shopware.com/prev/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  },
  "6.4": {
    domain: "https://pwa-demo-api.shopware.com/trunk/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  },
  canary: {
    domain: "https://pwa-demo-api.shopware.com/trunk/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  }
};
var docVersions = [
  {
    text: "CHANGELOG",
    link: "https://github.com/vuestorefront/shopware-pwa/blob/master/CHANGELOG.md"
  },
  {
    text: "current",
    link: "https://shopware-pwa-docs.vuestorefront.io"
  },
  {
    text: "v0.10",
    link: "https://v0.10.shopware-pwa-docs.vuestorefront.io"
  },
  {
    text: "v0.9",
    link: "https://v0.9.shopware-pwa-docs.vuestorefront.io"
  }
];
var compatibility_default = {
  shopwareApiVersion,
  instances,
  docVersions
};

// packages/commons/src/defaultConfig.ts
var import_merge2 = __toESM(require("lodash/merge"));
var import_axios = __toESM(require("axios"));
var defaultPwaConfigFile = {
  shopwareEndpoint: compatibility_default.instances[compatibility_default.shopwareApiVersion].domain,
  shopwareAccessToken: compatibility_default.instances[compatibility_default.shopwareApiVersion].apiKey,
  theme: "@shopware-pwa/default-theme",
  shopwareApiClient: {
    timeout: 1e4
  }
};

// packages/composables/src/internalHelpers/errorHandler.ts
var broadcastErrors = (errors, methodName, broadcast) => {
  if (!Array.isArray(errors) || !errors.length || !methodName) {
    return;
  }
  errors.forEach((error) => {
    let interceptorKey;
    switch (error.level) {
      case 0 /* NOTICE */:
        interceptorKey = INTERCEPTOR_KEYS.NOTICE;
        break;
      case 10 /* WARNING */:
        interceptorKey = INTERCEPTOR_KEYS.WARNING;
        break;
      default:
        interceptorKey = INTERCEPTOR_KEYS.ERROR;
    }
    broadcast(interceptorKey, {
      methodName,
      inputParams: {},
      [interceptorKey]: error
    });
  });
};

// packages/composables/src/hooks/useCart/index.ts
function useCart() {
  const COMPOSABLE_NAME = "useCart";
  const contextName = COMPOSABLE_NAME;
  const { apiInstance } = getApplicationContext({ contextName });
  const { broadcast } = useIntercept();
  const { getDefaults } = useDefaults({
    defaultsKey: COMPOSABLE_NAME
  });
  const loading = (0, import_vue_demi4.ref)(false);
  const error = (0, import_vue_demi4.ref)(null);
  const { sharedRef } = useSharedState();
  const _storeCart = sharedRef(`${contextName}-cart`);
  function refreshCart() {
    return __async(this, null, function* () {
      loading.value = true;
      try {
        const result = yield (0, import_shopware_6_client3.getCart)(apiInstance);
        broadcastUpcomingErrors(result);
        _storeCart.value = result;
      } catch (e) {
        const err = e;
        error.value = err.messages;
      } finally {
        loading.value = false;
      }
    });
  }
  function addProduct(_0) {
    return __async(this, arguments, function* ({
      id,
      quantity
    }) {
      const addToCartResult = yield (0, import_shopware_6_client3.addProductToCart)(id, quantity, apiInstance);
      broadcastUpcomingErrors(addToCartResult);
      _storeCart.value = addToCartResult;
      return addToCartResult;
    });
  }
  function removeItem(_0) {
    return __async(this, arguments, function* ({ id }) {
      const result = yield (0, import_shopware_6_client3.removeCartItem)(id, apiInstance);
      broadcastUpcomingErrors(result);
      _storeCart.value = result;
    });
  }
  function changeProductQuantity(_0) {
    return __async(this, arguments, function* ({ id, quantity }) {
      const result = yield (0, import_shopware_6_client3.changeCartItemQuantity)(id, quantity, apiInstance);
      broadcastUpcomingErrors(result);
      _storeCart.value = result;
    });
  }
  function submitPromotionCode(promotionCode) {
    return __async(this, null, function* () {
      if (promotionCode) {
        const result = yield (0, import_shopware_6_client3.addPromotionCode)(promotionCode, apiInstance);
        broadcastUpcomingErrors(result);
        _storeCart.value = result;
        broadcast(INTERCEPTOR_KEYS.ADD_PROMOTION_CODE, {
          result,
          promotionCode
        });
      }
    });
  }
  function broadcastUpcomingErrors(cartResult) {
    var _a;
    if (!cartResult) {
      return;
    }
    try {
      const cartErrorsKeys = Object.keys(((_a = _storeCart.value) == null ? void 0 : _a.errors) || {});
      const cartResultErrorKeys = Object.keys(cartResult.errors || {});
      const upcomingErrorsKeys = cartResultErrorKeys.filter((resultErrorKey) => !cartErrorsKeys.includes(resultErrorKey));
      const entityErrors = Object.values(cartResult.errors || {}).filter((entityError) => entityError.level === 20 /* ERROR */ || upcomingErrorsKeys.includes(entityError.key));
      broadcastErrors(entityErrors, `[${contextName}][cartError]`, broadcast);
    } catch (error2) {
      console.error("[useCart][broadcastUpcomingErrors]", error2);
    }
  }
  function getProductItemsSeoUrlsData() {
    return __async(this, null, function* () {
      if (!cartItems.value.length) {
        return [];
      }
      try {
        const result = yield (0, import_shopware_6_client3.getProducts)({
          ids: cartItems.value.map(({ referencedId }) => referencedId).filter(String),
          includes: getDefaults().getProductItemsSeoUrlsData.includes,
          associations: getDefaults().getProductItemsSeoUrlsData.associations
        }, apiInstance);
        return (result == null ? void 0 : result.elements) || [];
      } catch (error2) {
        console.error("[useCart][getProductItemsSeoUrlsData]", error2.messages);
      }
      return [];
    });
  }
  const appliedPromotionCodes = (0, import_vue_demi4.computed)(() => {
    return cartItems.value.filter((cartItem) => cartItem.type === "promotion");
  });
  const cart = (0, import_vue_demi4.computed)(() => _storeCart.value);
  const cartItems = (0, import_vue_demi4.computed)(() => {
    return cart.value ? cart.value.lineItems || [] : [];
  });
  const count = (0, import_vue_demi4.computed)(() => {
    return cartItems.value.reduce((accumulator, lineItem) => lineItem.type === "product" ? lineItem.quantity + accumulator : accumulator, 0);
  });
  const totalPrice = (0, import_vue_demi4.computed)(() => {
    const cartPrice = cart.value && cart.value.price && cart.value.price.totalPrice;
    return cartPrice || 0;
  });
  const shippingTotal = (0, import_vue_demi4.computed)(() => {
    var _a, _b, _c, _d;
    const shippingTotal2 = (_d = (_c = (_b = (_a = cart.value) == null ? void 0 : _a.deliveries) == null ? void 0 : _b[0]) == null ? void 0 : _c.shippingCosts) == null ? void 0 : _d.totalPrice;
    return shippingTotal2 || 0;
  });
  const subtotal = (0, import_vue_demi4.computed)(() => {
    var _a, _b;
    const cartPrice = (_b = (_a = cart.value) == null ? void 0 : _a.price) == null ? void 0 : _b.positionPrice;
    return cartPrice || 0;
  });
  const cartErrors = (0, import_vue_demi4.computed)(() => {
    var _a;
    return ((_a = cart.value) == null ? void 0 : _a.errors) && Object.values(cart.value.errors) || [];
  });
  return {
    addProduct,
    addPromotionCode: submitPromotionCode,
    appliedPromotionCodes,
    cart,
    cartItems,
    changeProductQuantity,
    count,
    error: (0, import_vue_demi4.computed)(() => error.value),
    loading: (0, import_vue_demi4.computed)(() => loading.value),
    refreshCart,
    removeItem,
    totalPrice,
    shippingTotal,
    subtotal,
    cartErrors,
    getProductItemsSeoUrlsData,
    broadcastUpcomingErrors
  };
}

// packages/composables/src/logic/useCartItem.ts
var import_vue_demi5 = require("vue-demi");
var import_shopware_6_client4 = require("@shopware-pwa/shopware-6-client");
var import_helpers2 = require("@shopware-pwa/helpers");
function useCartItem({
  cartItem,
  qtySteps = 50
}) {
  if (!cartItem) {
    throw new Error("[useCartItem] mandatory cartItem argument is missing.");
  }
  const COMPOSABLE_NAME = "useCartitem";
  const contextName = COMPOSABLE_NAME;
  const { apiInstance } = getApplicationContext({ contextName });
  const { refreshCart, broadcastUpcomingErrors } = useCart();
  const { getDefaults } = useDefaults({
    defaultsKey: COMPOSABLE_NAME
  });
  const itemQuantity = (0, import_vue_demi5.computed)(() => cartItem.quantity);
  const itemImageThumbnailUrl = (0, import_vue_demi5.computed)(() => (0, import_helpers2.getProductMainImageUrl)(cartItem));
  const itemRegularPrice = (0, import_vue_demi5.computed)(() => {
    var _a, _b, _c;
    return ((_b = (_a = cartItem.price) == null ? void 0 : _a.listPrice) == null ? void 0 : _b.price) || ((_c = cartItem.price) == null ? void 0 : _c.unitPrice);
  });
  const itemSpecialPrice = (0, import_vue_demi5.computed)(() => {
    var _a;
    return ((_a = cartItem.price) == null ? void 0 : _a.listPrice) && cartItem.price.unitPrice;
  });
  const itemOptions = (0, import_vue_demi5.computed)(() => {
    var _a;
    return cartItem.type === "product" && ((_a = cartItem.payload) == null ? void 0 : _a.options) || [];
  });
  const itemStock = (0, import_vue_demi5.computed)(() => {
    var _a;
    return (_a = cartItem.deliveryInformation) == null ? void 0 : _a.stock;
  });
  const itemType = (0, import_vue_demi5.computed)(() => cartItem.type);
  const isProduct = (0, import_vue_demi5.computed)(() => cartItem.type === "product");
  const isPromotion = (0, import_vue_demi5.computed)(() => cartItem.type === "promotion");
  const getProductQtySteps = (0, import_vue_demi5.computed)(() => {
    const quantityInformation = cartItem.quantityInformation;
    if (!quantityInformation || !quantityInformation.purchaseSteps || quantityInformation.purchaseSteps === 1)
      return null;
    const purchaseSteps = quantityInformation.purchaseSteps;
    const availableStock = quantityInformation.maxPurchase && quantityInformation.maxPurchase < qtySteps * purchaseSteps ? quantityInformation.maxPurchase : qtySteps;
    let i = purchaseSteps;
    let options = [];
    while (i <= availableStock) {
      options.push(i);
      i += purchaseSteps;
    }
    return options;
  });
  function removeItem() {
    return __async(this, null, function* () {
      const result = yield (0, import_shopware_6_client4.removeCartItem)(cartItem.id, apiInstance);
      broadcastUpcomingErrors(result);
      refreshCart();
    });
  }
  function changeItemQuantity(quantity) {
    return __async(this, null, function* () {
      const result = yield (0, import_shopware_6_client4.changeCartItemQuantity)(cartItem.id, quantity, apiInstance);
      broadcastUpcomingErrors(result);
      refreshCart();
    });
  }
  function getProductItemSeoUrlData() {
    return __async(this, null, function* () {
      if (!cartItem.referencedId) {
        return {};
      }
      try {
        const result = yield (0, import_shopware_6_client4.getProduct)(cartItem.referencedId, {
          includes: getDefaults().getProductItemsSeoUrlsData.includes,
          associations: getDefaults().getProductItemsSeoUrlsData.associations
        }, apiInstance);
        return result.product;
      } catch (error) {
        console.error("[useCart][getProductItemsSeoUrlsData]", error.messages);
      }
      return {};
    });
  }
  return {
    changeItemQuantity,
    removeItem,
    getProductItemSeoUrlData,
    getProductQtySteps,
    lineItem: (0, import_vue_demi5.computed)(() => cartItem),
    itemRegularPrice,
    itemSpecialPrice,
    itemOptions,
    itemStock,
    itemQuantity,
    itemType,
    itemImageThumbnailUrl,
    isProduct,
    isPromotion
  };
}

// packages/composables/src/logic/useAddToCart.ts
var import_vue_demi6 = require("vue-demi");
function useAddToCart(params) {
  const COMPOSABLE_NAME = "useAddToCart";
  const contextName = COMPOSABLE_NAME;
  const product = (0, import_vue_demi6.unref)(params.product);
  getApplicationContext({ contextName });
  const { addProduct, cartItems } = useCart();
  const { broadcast, intercept } = useIntercept();
  const quantity = (0, import_vue_demi6.ref)(1);
  const loading = (0, import_vue_demi6.ref)(false);
  const error = (0, import_vue_demi6.ref)(null);
  const addToCart = () => __async(this, null, function* () {
    if (!product || !product.id) {
      error.value = "Product has to be passed as a composable argument and needs to have an id property.";
      return;
    }
    loading.value = true;
    error.value = null;
    if (!quantity.value)
      quantity.value = 1;
    try {
      const addToCartResponse = yield addProduct({
        id: product.id,
        quantity: quantity.value
      });
      broadcast(INTERCEPTOR_KEYS.ADD_TO_CART, {
        product,
        quantity: quantity.value,
        apiResponse: addToCartResponse
      });
      quantity.value = 1;
    } catch (e) {
      const err = e;
      error.value = err;
      broadcast(INTERCEPTOR_KEYS.ERROR, {
        methodName: `[${contextName}][addToCart]`,
        inputParams: {
          product,
          quantity: quantity.value
        },
        error: err
      });
    } finally {
      loading.value = false;
    }
  });
  const onAddToCart = (fn) => intercept(INTERCEPTOR_KEYS.ADD_TO_CART, fn);
  const getStock = (0, import_vue_demi6.computed)(() => product && product.stock);
  const getAvailableStock = (0, import_vue_demi6.computed)(() => product && product.availableStock);
  const isInCart = (0, import_vue_demi6.computed)(() => product && cartItems.value.some((item) => item.referencedId === product.id));
  return {
    addToCart,
    quantity,
    error,
    loading,
    getStock,
    getAvailableStock,
    isInCart,
    onAddToCart
  };
}

// packages/composables/src/logic/useCheckout.ts
var import_vue_demi7 = require("vue-demi");
var import_shopware_6_client5 = require("@shopware-pwa/shopware-6-client");
function useCheckout() {
  const COMPOSABLE_NAME = "useCheckout";
  const contextName = COMPOSABLE_NAME;
  const { apiInstance } = getApplicationContext({ contextName });
  const { broadcast, intercept } = useIntercept();
  const { refreshCart } = useCart();
  const { sessionContext } = useSessionContext();
  const { sharedRef } = useSharedState();
  const storeShippingMethods = sharedRef(`${contextName}-ShippingMethods`);
  const storePaymentMethods = sharedRef(`${contextName}-PaymentMethods`);
  const loadings = (0, import_vue_demi7.reactive)({
    createOrder: false
  });
  const shippingMethods = (0, import_vue_demi7.computed)(() => storeShippingMethods.value || []);
  const paymentMethods = (0, import_vue_demi7.computed)(() => storePaymentMethods.value || []);
  const onOrderPlace = (fn) => intercept(INTERCEPTOR_KEYS.ORDER_PLACE, fn);
  const getShippingMethods = (..._0) => __async(this, [..._0], function* ({ forceReload } = { forceReload: false }) {
    if (shippingMethods.value.length && !forceReload)
      return shippingMethods;
    const response = yield (0, import_shopware_6_client5.getAvailableShippingMethods)(apiInstance, {
      onlyAvailable: true
    });
    storeShippingMethods.value = (response == null ? void 0 : response.elements) || [];
    return shippingMethods;
  });
  const getPaymentMethods = (..._0) => __async(this, [..._0], function* ({ forceReload } = { forceReload: false }) {
    if (paymentMethods.value.length && !forceReload)
      return paymentMethods;
    const response = yield (0, import_shopware_6_client5.getAvailablePaymentMethods)(apiInstance, {
      onlyAvailable: true
    });
    storePaymentMethods.value = (response == null ? void 0 : response.elements) || [];
    return paymentMethods;
  });
  const createOrder = (params) => __async(this, null, function* () {
    try {
      loadings.createOrder = true;
      const order = yield (0, import_shopware_6_client5.createOrder)(params, apiInstance);
      broadcast(INTERCEPTOR_KEYS.ORDER_PLACE, {
        order
      });
      return order;
    } catch (e) {
      const err = e;
      broadcast(INTERCEPTOR_KEYS.ERROR, {
        methodName: `[${contextName}][createOrder]`,
        inputParams: {},
        error: err
      });
      throw err;
    } finally {
      loadings.createOrder = false;
      refreshCart();
    }
  });
  const shippingAddress = (0, import_vue_demi7.computed)(() => {
    var _a, _b;
    return (_b = (_a = sessionContext.value) == null ? void 0 : _a.shippingLocation) == null ? void 0 : _b.address;
  });
  const billingAddress = (0, import_vue_demi7.computed)(() => {
    var _a, _b;
    return (_b = (_a = sessionContext.value) == null ? void 0 : _a.customer) == null ? void 0 : _b.activeBillingAddress;
  });
  return {
    getPaymentMethods,
    paymentMethods,
    getShippingMethods,
    shippingMethods,
    createOrder,
    shippingAddress,
    billingAddress,
    onOrderPlace,
    loadings
  };
}

// packages/composables/src/logic/useSessionContext.ts
var import_vue_demi8 = require("vue-demi");
var import_shopware_6_client6 = require("@shopware-pwa/shopware-6-client");
function useSessionContext() {
  const COMPOSABLE_NAME = "useSessionContext";
  const contextName = COMPOSABLE_NAME;
  const { apiInstance } = getApplicationContext({ contextName });
  const { broadcast, intercept } = useIntercept();
  const { sharedRef } = useSharedState();
  const storeSessionContext = sharedRef(`${contextName}-sessionContext`);
  const onCurrencyChange = (fn) => intercept(INTERCEPTOR_KEYS.SESSION_SET_CURRENCY, fn);
  const onPaymentMethodChange = (fn) => intercept(INTERCEPTOR_KEYS.SESSION_SET_PAYMENT_METHOD, fn);
  const onShippingMethodChange = (fn) => intercept(INTERCEPTOR_KEYS.SESSION_SET_SHIPPING_METHOD, fn);
  const sessionContext = (0, import_vue_demi8.computed)(() => storeSessionContext.value);
  const refreshSessionContext = () => __async(this, null, function* () {
    try {
      const context = yield (0, import_shopware_6_client6.getSessionContext)(apiInstance);
      storeSessionContext.value = context;
    } catch (e) {
      console.error("[UseSessionContext][refreshSessionContext]", e);
    }
  });
  const shippingMethod = (0, import_vue_demi8.computed)(() => {
    var _a;
    return ((_a = sessionContext.value) == null ? void 0 : _a.shippingMethod) || null;
  });
  const setShippingMethod = (..._0) => __async(this, [..._0], function* (shippingMethod2 = {}) {
    if (!(shippingMethod2 == null ? void 0 : shippingMethod2.id)) {
      throw new Error("You need to provide shipping method id in order to set shipping method.");
    }
    yield (0, import_shopware_6_client6.setCurrentShippingMethod)(shippingMethod2.id, apiInstance);
    yield refreshSessionContext();
    broadcast(INTERCEPTOR_KEYS.SESSION_SET_SHIPPING_METHOD, {
      shippingMethod: shippingMethod2
    });
  });
  const paymentMethod = (0, import_vue_demi8.computed)(() => {
    var _a;
    return ((_a = sessionContext.value) == null ? void 0 : _a.paymentMethod) || null;
  });
  const setPaymentMethod = (..._0) => __async(this, [..._0], function* (paymentMethod2 = {}) {
    if (!(paymentMethod2 == null ? void 0 : paymentMethod2.id)) {
      throw new Error("You need to provide payment method id in order to set payment method.");
    }
    yield (0, import_shopware_6_client6.setCurrentPaymentMethod)(paymentMethod2.id, apiInstance);
    yield refreshSessionContext();
    broadcast(INTERCEPTOR_KEYS.SESSION_SET_PAYMENT_METHOD, {
      paymentMethod: paymentMethod2
    });
  });
  const currency = (0, import_vue_demi8.computed)(() => {
    var _a;
    return ((_a = sessionContext.value) == null ? void 0 : _a.currency) || null;
  });
  const setCurrency = (..._0) => __async(this, [..._0], function* (currency2 = {}) {
    if (!currency2.id) {
      console.error("You need to provide currency id in order to set currency.", currency2);
      return;
    }
    yield (0, import_shopware_6_client6.setCurrentCurrency)(currency2.id, apiInstance);
    yield refreshSessionContext();
    broadcast(INTERCEPTOR_KEYS.SESSION_SET_CURRENCY, {
      currency: currency2
    });
  });
  const activeShippingAddress = (0, import_vue_demi8.computed)(() => {
    var _a, _b;
    return ((_b = (_a = sessionContext.value) == null ? void 0 : _a.customer) == null ? void 0 : _b.activeShippingAddress) || null;
  });
  const setActiveShippingAddress = (address) => __async(this, null, function* () {
    if (!(address == null ? void 0 : address.id)) {
      throw new Error("You need to provide address id in order to set the address.");
    }
    yield (0, import_shopware_6_client6.setCurrentShippingAddress)(address.id, apiInstance);
    refreshSessionContext();
  });
  const activeBillingAddress = (0, import_vue_demi8.computed)(() => {
    var _a, _b;
    return ((_b = (_a = sessionContext.value) == null ? void 0 : _a.customer) == null ? void 0 : _b.activeBillingAddress) || null;
  });
  const setActiveBillingAddress = (address) => __async(this, null, function* () {
    if (!(address == null ? void 0 : address.id)) {
      throw new Error("You need to provide address id in order to set the address.");
    }
    yield (0, import_shopware_6_client6.setCurrentBillingAddress)(address.id, apiInstance);
    refreshSessionContext();
  });
  const countryId = (0, import_vue_demi8.computed)(() => {
    var _a, _b;
    return (_b = (_a = sessionContext.value) == null ? void 0 : _a.salesChannel) == null ? void 0 : _b.countryId;
  });
  return {
    sessionContext,
    refreshSessionContext,
    shippingMethod,
    setShippingMethod,
    paymentMethod,
    setPaymentMethod,
    currency,
    setCurrency,
    activeShippingAddress,
    setActiveShippingAddress,
    activeBillingAddress,
    setActiveBillingAddress,
    countryId,
    onCurrencyChange,
    onPaymentMethodChange,
    onShippingMethodChange
  };
}

// packages/composables/src/logic/useUIState.ts
var import_vue_demi9 = require("vue-demi");
function useUIState(params) {
  const COMPOSABLE_NAME = "useUIState";
  const contextName = COMPOSABLE_NAME;
  const stateName = (0, import_vue_demi9.unref)(params == null ? void 0 : params.stateName);
  getApplicationContext({ contextName });
  const { sharedRef } = useSharedState();
  const _sharedState = sharedRef(`sw-${contextName}-${stateName}`);
  const localState = (0, import_vue_demi9.ref)(false);
  const isOpen = (0, import_vue_demi9.computed)(() => stateName ? !!_sharedState.value : !!localState.value);
  function switchState(to) {
    if (stateName) {
      const stateToChange = to !== void 0 ? !!to : !_sharedState.value;
      _sharedState.value = stateToChange;
    } else {
      const stateToChange = to !== void 0 ? !!to : !localState.value;
      localState.value = stateToChange;
    }
  }
  return {
    isOpen,
    switchState
  };
}

// packages/composables/src/hooks/useCurrency.ts
var import_vue_demi10 = require("vue-demi");
var import_shopware_6_client7 = require("@shopware-pwa/shopware-6-client");
function useCurrency() {
  const COMPOSABLE_NAME = "useCurrency";
  const contextName = COMPOSABLE_NAME;
  const { apiInstance } = getApplicationContext({ contextName });
  const { sharedRef } = useSharedState();
  const _availableCurrencies = sharedRef(`sw-${contextName}-availableCurrencies`);
  const { currency, setCurrency: setContextCurrency } = useSessionContext();
  const { refreshCart } = useCart();
  const currencySymbol = (0, import_vue_demi10.computed)(() => {
    var _a;
    return ((_a = currency.value) == null ? void 0 : _a.symbol) || "";
  });
  const availableCurrencies = (0, import_vue_demi10.computed)(() => {
    var _a;
    if ((_a = _availableCurrencies.value) == null ? void 0 : _a.length) {
      return _availableCurrencies.value;
    }
    return currency.value ? [currency.value] : [];
  });
  const loadAvailableCurrencies = (options) => __async(this, null, function* () {
    var _a;
    if (!(options == null ? void 0 : options.forceReload) && ((_a = _availableCurrencies.value) == null ? void 0 : _a.length))
      return;
    const response = yield (0, import_shopware_6_client7.getAvailableCurrencies)(apiInstance);
    _availableCurrencies.value = response;
  });
  const setCurrency = (currency2) => __async(this, null, function* () {
    try {
      yield setContextCurrency(currency2);
      refreshCart();
    } catch (e) {
      console.error("[useCurrency][setCurrency] Problem with currency change", e);
    }
  });
  return {
    loadAvailableCurrencies,
    setCurrency,
    availableCurrencies,
    currencySymbol,
    currency
  };
}

// packages/composables/src/hooks/useNavigation.ts
var import_vue_demi11 = require("vue-demi");
var import_shopware_6_client8 = require("@shopware-pwa/shopware-6-client");
function useNavigation(params) {
  const COMPOSABLE_NAME = "useNavigation";
  const contextName = COMPOSABLE_NAME;
  const type = (params == null ? void 0 : params.type) || "main-navigation";
  const { apiInstance } = getApplicationContext({ contextName });
  const { sharedRef } = useSharedState();
  const { getIncludesConfig, getAssociationsConfig } = useDefaults({
    defaultsKey: contextName
  });
  const sharedElements = sharedRef(`useNavigation-${type}`);
  const navigationElements = (0, import_vue_demi11.computed)(() => sharedElements.value);
  const loadNavigationElements = (_0) => __async(this, [_0], function* ({ depth }) {
    try {
      const navigationResponse = yield (0, import_shopware_6_client8.getStoreNavigation)({
        requestActiveId: type,
        requestRootId: type,
        searchCriteria: {
          includes: getIncludesConfig(),
          associations: getAssociationsConfig()
        },
        depth
      }, apiInstance);
      sharedElements.value = navigationResponse || [];
    } catch (e) {
      sharedElements.value = [];
      console.error("[useNavigation][loadNavigationElements]", e.messages);
    }
  });
  return {
    navigationElements,
    loadNavigationElements
  };
}

// packages/composables/src/hooks/useSalutations.ts
var import_vue_demi12 = require("vue-demi");
var import_shopware_6_client9 = require("@shopware-pwa/shopware-6-client");
function useSalutations() {
  const COMPOSABLE_NAME = "useSalutations";
  const contextName = COMPOSABLE_NAME;
  const { apiInstance } = getApplicationContext({ contextName });
  const { sharedRef } = useSharedState();
  const _salutations = sharedRef(`sw-${contextName}-salutations`);
  const error = (0, import_vue_demi12.ref)(null);
  const fetchSalutations = () => __async(this, null, function* () {
    try {
      const { elements } = yield (0, import_shopware_6_client9.getAvailableSalutations)(apiInstance);
      _salutations.value = elements;
    } catch (e) {
      const err = e;
      error.value = err.messages;
    }
  });
  const mountedCallback = () => __async(this, null, function* () {
    if (!_salutations.value) {
      yield fetchSalutations();
    }
  });
  const getSalutations = (0, import_vue_demi12.computed)(() => {
    return _salutations.value || [];
  });
  (0, import_vue_demi12.onMounted)(mountedCallback);
  return {
    mountedCallback,
    fetchSalutations,
    getSalutations,
    error
  };
}

// packages/composables/src/hooks/useCountries.ts
var import_vue_demi13 = require("vue-demi");
var import_shopware_6_client10 = require("@shopware-pwa/shopware-6-client");
function useCountries() {
  const COMPOSABLE_NAME = "useCountries";
  const contextName = COMPOSABLE_NAME;
  const { apiInstance } = getApplicationContext({ contextName });
  const { sharedRef } = useSharedState();
  const _sharedCountried = sharedRef(`sw-${contextName}-countries`);
  const error = (0, import_vue_demi13.ref)(null);
  const fetchCountries = () => __async(this, null, function* () {
    try {
      const { elements } = yield (0, import_shopware_6_client10.getAvailableCountries)(apiInstance);
      _sharedCountried.value = elements;
    } catch (e) {
      const err = e;
      error.value = err.messages;
    }
  });
  const getCountries = (0, import_vue_demi13.computed)(() => {
    var _a;
    return (_a = _sharedCountried.value) != null ? _a : [];
  });
  const mountedCallback = () => __async(this, null, function* () {
    if (!_sharedCountried.value) {
      yield fetchCountries();
    }
  });
  (0, import_vue_demi13.onMounted)(mountedCallback);
  return {
    mountedCallback,
    fetchCountries,
    getCountries,
    error
  };
}

// packages/composables/src/hooks/useUser.ts
var import_vue_demi14 = require("vue-demi");
var import_shopware_6_client11 = require("@shopware-pwa/shopware-6-client");
function useUser() {
  const COMPOSABLE_NAME = "useUser";
  const contextName = COMPOSABLE_NAME;
  const { apiInstance } = getApplicationContext({ contextName });
  const { broadcast, intercept } = useIntercept();
  const { refreshSessionContext } = useSessionContext();
  const { refreshCart } = useCart();
  const { getDefaults } = useDefaults({ defaultsKey: contextName });
  const { sharedRef } = useSharedState();
  const storeUser = sharedRef(`${contextName}-user`);
  const loading = (0, import_vue_demi14.ref)(false);
  const error = (0, import_vue_demi14.ref)(null);
  const errors = (0, import_vue_demi14.reactive)({
    login: [],
    register: [],
    resetPassword: [],
    updatePassword: [],
    updateEmail: [],
    setDefaultPaymentMethod: []
  });
  const country = (0, import_vue_demi14.ref)(null);
  const salutation = (0, import_vue_demi14.ref)(null);
  const user = (0, import_vue_demi14.computed)(() => storeUser.value);
  function login() {
    return __async(this, arguments, function* ({
      username,
      password
    } = {}) {
      loading.value = true;
      error.value = null;
      errors.login = [];
      try {
        yield (0, import_shopware_6_client11.login)({ username, password }, apiInstance);
        yield refreshUser();
        broadcast(INTERCEPTOR_KEYS.USER_LOGIN, {
          user: user.value
        });
        return true;
      } catch (e) {
        const err = e;
        errors.login = err.messages;
        broadcast(INTERCEPTOR_KEYS.ERROR, {
          methodName: `[${contextName}][login]`,
          inputParams: {},
          error: err
        });
        return false;
      } finally {
        loading.value = false;
        yield refreshUser();
        refreshCart();
      }
    });
  }
  function register(params) {
    return __async(this, null, function* () {
      loading.value = true;
      errors.register = [];
      try {
        const customer = yield (0, import_shopware_6_client11.register)(params, apiInstance);
        broadcast(INTERCEPTOR_KEYS.USER_REGISTER, { customer });
        storeUser.value = customer || {};
        refreshSessionContext();
        return true;
      } catch (e) {
        const err = e;
        errors.register = err.messages;
        broadcast(INTERCEPTOR_KEYS.ERROR, {
          methodName: `[${contextName}][register]`,
          inputParams: {},
          error: err
        });
        return false;
      } finally {
        loading.value = false;
      }
    });
  }
  function logout() {
    return __async(this, null, function* () {
      try {
        yield (0, import_shopware_6_client11.logout)(apiInstance);
        broadcast(INTERCEPTOR_KEYS.USER_LOGOUT);
      } catch (e) {
        const err = e;
        error.value = err.messages;
        broadcast(INTERCEPTOR_KEYS.ERROR, {
          methodName: `[${contextName}][logout]`,
          inputParams: {},
          error: err
        });
      } finally {
        yield refreshUser();
        refreshCart();
      }
    });
  }
  const onLogout = (fn) => intercept(INTERCEPTOR_KEYS.USER_LOGOUT, fn);
  const onUserLogin = (fn) => intercept(INTERCEPTOR_KEYS.USER_LOGIN, fn);
  const onUserRegister = (fn) => intercept(INTERCEPTOR_KEYS.USER_REGISTER, fn);
  function refreshUser() {
    return __async(this, arguments, function* (params = {}) {
      try {
        const user2 = yield (0, import_shopware_6_client11.getCustomer)(Object.assign({}, getDefaults(), params), apiInstance);
        storeUser.value = user2 || {};
      } catch (e) {
        storeUser.value = {};
        console.error("[useUser][refreshUser]", e);
      }
    });
  }
  function loadCountry(userId) {
    return __async(this, null, function* () {
      try {
        country.value = yield (0, import_shopware_6_client11.getUserCountry)(userId, apiInstance);
      } catch (e) {
        const err = e;
        error.value = err.messages;
      }
    });
  }
  function loadSalutation(salutationId) {
    return __async(this, null, function* () {
      try {
        salutation.value = yield (0, import_shopware_6_client11.getUserSalutation)(salutationId, apiInstance);
      } catch (e) {
        const err = e;
        error.value = err.messages;
      }
    });
  }
  function updatePersonalInfo(personals) {
    return __async(this, null, function* () {
      try {
        yield (0, import_shopware_6_client11.updateProfile)(personals, apiInstance);
      } catch (e) {
        error.value = e;
        return false;
      }
      return true;
    });
  }
  function updateEmail(updateEmailData) {
    return __async(this, null, function* () {
      errors.updateEmail = [];
      try {
        yield (0, import_shopware_6_client11.updateEmail)(updateEmailData, apiInstance);
      } catch (e) {
        errors.updateEmail = e.messages;
        return false;
      }
      return true;
    });
  }
  function setDefaultPaymentMethod(paymentMethodId) {
    return __async(this, null, function* () {
      try {
        yield (0, import_shopware_6_client11.setDefaultCustomerPaymentMethod)(paymentMethodId);
      } catch (error2) {
        errors.setDefaultPaymentMethod = error2.messages;
      }
    });
  }
  const isLoggedIn = (0, import_vue_demi14.computed)(() => {
    var _a;
    return !!((_a = user.value) == null ? void 0 : _a.id) && !!user.value.active;
  });
  const isCustomerSession = (0, import_vue_demi14.computed)(() => {
    var _a;
    return !!((_a = user.value) == null ? void 0 : _a.id) && !user.value.guest;
  });
  const isGuestSession = (0, import_vue_demi14.computed)(() => {
    var _a;
    return !!((_a = user.value) == null ? void 0 : _a.guest);
  });
  return {
    login,
    register,
    user,
    error: (0, import_vue_demi14.computed)(() => error.value),
    loading: (0, import_vue_demi14.computed)(() => loading.value),
    isLoggedIn,
    isCustomerSession,
    isGuestSession,
    refreshUser,
    logout,
    updateEmail,
    updatePersonalInfo,
    setDefaultPaymentMethod,
    loadSalutation,
    salutation,
    loadCountry,
    country,
    errors,
    onLogout,
    onUserLogin,
    onUserRegister
  };
}

// packages/composables/src/hooks/useCustomerOrders.ts
var import_vue_demi15 = require("vue-demi");
var import_shopware_6_client12 = require("@shopware-pwa/shopware-6-client");
function useCustomerOrders() {
  const COMPOSABLE_NAME = "useCustomerOrders";
  const contextName = COMPOSABLE_NAME;
  const { apiInstance } = getApplicationContext({ contextName });
  const { getDefaults } = useDefaults({ defaultsKey: contextName });
  const errors = (0, import_vue_demi15.reactive)({
    loadOrders: []
  });
  const ordersResult = (0, import_vue_demi15.ref)(null);
  const loadOrders = (..._0) => __async(this, [..._0], function* (parameters = {}) {
    const fetchedOrders = yield (0, import_shopware_6_client12.getCustomerOrders)(Object.assign({}, getDefaults(), parameters), apiInstance);
    ordersResult.value = fetchedOrders;
  });
  const getTotal = (0, import_vue_demi15.computed)(() => {
    var _a, _b;
    const aggregations = (_a = ordersResult.value) == null ? void 0 : _a.aggregations;
    return ((_b = aggregations == null ? void 0 : aggregations["count-id"]) == null ? void 0 : _b.count) || 0;
  });
  const getLimit = (0, import_vue_demi15.computed)(() => {
    var _a;
    return ((_a = ordersResult.value) == null ? void 0 : _a.limit) || 10;
  });
  const getTotalPagesCount = (0, import_vue_demi15.computed)(() => Math.ceil(getTotal.value / getLimit.value));
  const orders = (0, import_vue_demi15.computed)(() => {
    var _a;
    return ((_a = ordersResult.value) == null ? void 0 : _a.elements) || [];
  });
  const getCurrentPage = (0, import_vue_demi15.computed)(() => {
    var _a;
    return ((_a = ordersResult.value) == null ? void 0 : _a.page) || 1;
  });
  const changeCurrentPage = (pageNumber) => __async(this, null, function* () {
    yield loadOrders({ page: +pageNumber });
  });
  const getOrderDetails2 = (orderId, params) => __async(this, null, function* () {
    return (0, import_shopware_6_client12.getOrderDetails)(orderId, params, apiInstance);
  });
  return {
    orders,
    getCurrentPage,
    changeCurrentPage,
    getTotalPagesCount,
    getTotal,
    getLimit,
    loadOrders,
    getOrderDetails: getOrderDetails2,
    errors
  };
}

// packages/composables/src/hooks/useCustomerPassword.ts
var import_vue_demi16 = require("vue-demi");
var import_shopware_6_client13 = require("@shopware-pwa/shopware-6-client");
function useCustomerPassword() {
  const COMPOSABLE_NAME = "useCustomerPassword";
  const contextName = COMPOSABLE_NAME;
  const { apiInstance } = getApplicationContext({ contextName });
  const errors = (0, import_vue_demi16.reactive)({
    resetPassword: [],
    updatePassword: []
  });
  const updatePassword = (updatePasswordData) => __async(this, null, function* () {
    try {
      errors.updatePassword = [];
      yield (0, import_shopware_6_client13.updatePassword)(updatePasswordData, apiInstance);
    } catch (e) {
      errors.updatePassword = e.messages;
      return false;
    }
    return true;
  });
  const resetPassword = (resetPasswordData) => __async(this, null, function* () {
    try {
      yield (0, import_shopware_6_client13.resetPassword)(resetPasswordData, apiInstance);
    } catch (e) {
      errors.resetPassword = e.messages;
      return false;
    }
    return true;
  });
  return {
    updatePassword,
    resetPassword,
    errors
  };
}

// packages/composables/src/hooks/useCustomerAddresses.ts
var import_vue_demi17 = require("vue-demi");
var import_shopware_6_client14 = require("@shopware-pwa/shopware-6-client");
function useCustomerAddresses() {
  const COMPOSABLE_NAME = "useCustomerAddresses";
  const contextName = COMPOSABLE_NAME;
  const { apiInstance } = getApplicationContext({ contextName });
  const { getDefaults } = useDefaults({ defaultsKey: contextName });
  const { refreshUser } = useUser();
  const { sharedRef } = useSharedState();
  const storeAddresses = sharedRef(`${contextName}-addresses`, []);
  const errors = (0, import_vue_demi17.reactive)({
    markAddressAsDefault: [],
    updateAddress: [],
    addAddress: [],
    deleteAddress: [],
    loadAddresses: []
  });
  const addresses = (0, import_vue_demi17.computed)(() => storeAddresses.value || []);
  const markAddressAsDefault = (_0) => __async(this, [_0], function* ({
    addressId,
    type
  }) {
    if (!addressId || !type) {
      return false;
    }
    try {
      switch (type) {
        case "billing":
          yield (0, import_shopware_6_client14.setDefaultCustomerBillingAddress)(addressId, apiInstance);
          break;
        case "shipping":
          yield (0, import_shopware_6_client14.setDefaultCustomerShippingAddress)(addressId, apiInstance);
          break;
        default:
          return false;
      }
      yield refreshUser();
    } catch (e) {
      const err = e;
      errors.markAddressAsDefault = err.messages;
      return false;
    }
    return true;
  });
  const updateAddress = (params) => __async(this, null, function* () {
    try {
      const { id } = yield (0, import_shopware_6_client14.updateCustomerAddress)(params, apiInstance);
      return id;
    } catch (e) {
      const err = e;
      errors.updateAddress = err.messages;
    }
  });
  const addAddress = (params) => __async(this, null, function* () {
    try {
      const { id } = yield (0, import_shopware_6_client14.createCustomerAddress)(params, apiInstance);
      return id;
    } catch (e) {
      const err = e;
      errors.addAddress = err.messages;
    }
  });
  const deleteAddress = (addressId) => __async(this, null, function* () {
    try {
      yield (0, import_shopware_6_client14.deleteCustomerAddress)(addressId, apiInstance);
      return true;
    } catch (e) {
      const err = e;
      errors.deleteAddress = err.messages;
    }
    return false;
  });
  const loadAddresses = (..._0) => __async(this, [..._0], function* (params = {}) {
    try {
      const response = yield (0, import_shopware_6_client14.getCustomerAddresses)(Object.assign({}, getDefaults(), params), apiInstance);
      storeAddresses.value = response.elements;
    } catch (e) {
      const err = e;
      errors.loadAddresses = err.messages;
    }
  });
  return {
    addresses,
    errors,
    loadAddresses,
    markAddressAsDefault,
    addAddress,
    updateAddress,
    deleteAddress
  };
}

// packages/composables/src/logic/useDefaults.ts
function useDefaults(params) {
  const COMPOSABLE_NAME = "useDefaults";
  const contextName = COMPOSABLE_NAME;
  const defaultsKey = params.defaultsKey;
  const { shopwareDefaults } = getApplicationContext({ contextName });
  if (!shopwareDefaults) {
    throw new Error("[composables][useDefaults]: applicationContext does not have shopwareDefaults!");
  }
  const getDefaultsFor = (keyName) => {
    if (!shopwareDefaults[keyName]) {
      warning({
        packageName: "composables",
        methodName: contextName,
        notes: `there is no defaults configuration for key: ${keyName}`
      });
      return;
    }
    return shopwareDefaults[keyName];
  };
  const getIncludesConfig = () => {
    var _a;
    return ((_a = getDefaultsFor(defaultsKey)) == null ? void 0 : _a.includes) || {};
  };
  const getAssociationsConfig = () => {
    var _a;
    return ((_a = getDefaultsFor(defaultsKey)) == null ? void 0 : _a.associations) || {};
  };
  const getDefaults = () => getDefaultsFor(defaultsKey) || {};
  return {
    getIncludesConfig,
    getAssociationsConfig,
    getDefaults
  };
}

// packages/composables/src/logic/useNotifications.ts
var import_vue_demi18 = require("vue-demi");
function useNotifications() {
  const COMPOSABLE_NAME = "useNotifications";
  const contextName = COMPOSABLE_NAME;
  getApplicationContext({ contextName });
  const { sharedRef } = useSharedState();
  const _notifications = sharedRef(`sw-${contextName}-notifications`, []);
  const removeOne = (notificationId) => {
    var _a;
    _notifications.value = ((_a = _notifications.value) == null ? void 0 : _a.filter(({ id }) => id !== notificationId)) || [];
  };
  const removeAll = () => _notifications.value = [];
  const geterateId = () => new Date().getTime();
  const pushNotification = (message, options) => __async(this, null, function* () {
    const timeout = options.timeout || 2500;
    const persistent = !!options.persistent;
    _notifications.value = _notifications.value || [];
    const messageId = geterateId();
    _notifications.value.push({
      id: messageId,
      type: options.type,
      message
    });
    if (!persistent) {
      setTimeout(() => {
        removeOne(messageId);
      }, timeout);
    }
  });
  return {
    removeOne,
    removeAll,
    pushInfo: (message, options = {}) => pushNotification(message, __spreadProps(__spreadValues({}, options), { type: "info" })),
    pushSuccess: (message, options = {}) => pushNotification(message, __spreadProps(__spreadValues({}, options), { type: "success" })),
    pushWarning: (message, options = {}) => pushNotification(message, __spreadProps(__spreadValues({}, options), { type: "warning" })),
    pushError: (message, options = {}) => pushNotification(message, __spreadProps(__spreadValues({}, options), { type: "danger" })),
    notifications: (0, import_vue_demi18.computed)(() => _notifications.value || [])
  };
}

// packages/composables/src/logic/useIntercept.ts
var import_vue_demi19 = require("vue-demi");
var INTERCEPTOR_KEYS = {
  ADD_TO_CART: "addToCart",
  ADD_TO_WISHLIST: "addToWishlist",
  ADD_PROMOTION_CODE: "addPromotionCode",
  ERROR: "error",
  WARNING: "warning",
  NOTICE: "notice",
  ORDER_PLACE: "onOrderPlace",
  ORDER_PAYMENT_METHOD_CHANGED: "onOrderPaymentMethodChanged",
  ORDER_CANCELLED: "onOrderCanceled",
  ORDER_DETAILS_LOADED: "onOrderDetailsLoaded",
  ORDER_HANDLE_PAYMENT: "onOrderHandlePayment",
  SESSION_SET_CURRENCY: "onCurrencyChange",
  SESSION_SET_PAYMENT_METHOD: "onPaymentMethodChange",
  SESSION_SET_SHIPPING_METHOD: "onShippingMethodChange",
  USER_LOGOUT: "onUserLogout",
  USER_LOGIN: "onUserLogin",
  USER_REGISTER: "onUserRegister"
};
function useIntercept() {
  const COMPOSABLE_NAME = "useIntercept";
  const contextName = COMPOSABLE_NAME;
  const { interceptors, devtools } = getApplicationContext({ contextName });
  const localSubscribers = [];
  const isVueInstance = !!(0, import_vue_demi19.getCurrentInstance)();
  const broadcast = (broadcastKey, value) => {
    var _a;
    const event = devtools == null ? void 0 : devtools.trackEvent("[useIntercept][broadcast] " + broadcastKey, value);
    if ((_a = interceptors[broadcastKey]) == null ? void 0 : _a.length) {
      interceptors[broadcastKey].forEach((interceptor) => {
        event == null ? void 0 : event.log("Run interceptor: " + interceptor.name, value);
        interceptor.handler(value);
      });
    }
    event == null ? void 0 : event.log("Broadcast ended", value);
  };
  const intercept = (broadcastKey, handler) => {
    devtools == null ? void 0 : devtools.warning("[useIntercept][intercept] Anonymous interceptor registration for key: " + broadcastKey + " use 'on' method instead");
    on({
      broadcastKey,
      name: "annonymous",
      handler
    });
  };
  const disconnect = (broadcastKey, interceptor) => {
    var _a;
    devtools == null ? void 0 : devtools.log("[useIntercept][disconnect] Disconnecting interceptor", {
      broadcastKey,
      interceptor
    });
    interceptors[broadcastKey] = ((_a = interceptors[broadcastKey]) == null ? void 0 : _a.filter((registeredInterceptor) => registeredInterceptor.handler !== interceptor && registeredInterceptor.name !== interceptor)) || [];
  };
  function on(params) {
    devtools == null ? void 0 : devtools.log("[useIntercept][on] Registered interceptor", params);
    if (!interceptors[params.broadcastKey])
      interceptors[params.broadcastKey] = [];
    interceptors[params.broadcastKey].push({
      name: params.name,
      handler: params.handler
    });
    localSubscribers.push({
      broadcastKey: params.broadcastKey,
      name: params.name
    });
  }
  isVueInstance && (0, import_vue_demi19.onUnmounted)(() => {
    localSubscribers.forEach(({ broadcastKey, name }) => {
      disconnect(broadcastKey, name);
    });
  });
  return {
    broadcast,
    intercept,
    disconnect,
    on
  };
}

// packages/composables/src/internalHelpers/defaultApiParams.json
var useCms2 = {
  limit: 10,
  associations: {
    manufacturer: {
      associations: {
        media: {}
      }
    },
    media: {
      sort: [
        {
          field: "position",
          order: "ASC",
          naturalSorting: false
        }
      ]
    },
    productReviews: {},
    properties: {
      associations: {
        group: {}
      }
    }
  },
  includes: {
    cms_page_slot: [
      "id",
      "type",
      "slot",
      "blockId",
      "config",
      "data",
      "backgroundMediaMode",
      "backgroundMedia"
    ],
    cms_page_block: [
      "slots",
      "type",
      "id",
      "backgroundColor",
      "backgroundMedia",
      "sectionPosition"
    ],
    cms_page_section: [
      "id",
      "backgroundMedia",
      "blocks",
      "type",
      "sizingMode"
    ],
    cms_page: ["id", "name", "sections", "type", "config"],
    product: [
      "media",
      "productReviews",
      "name",
      "description",
      "ratingAverage",
      "calculatedCheapestPrice",
      "calculatedPrice",
      "calculatedPrices",
      "calculatedListingPrice",
      "cover",
      "parentId",
      "id",
      "translated",
      "optionIds",
      "properties",
      "manufacturer",
      "seoUrls",
      "crossSellings",
      "availableStock",
      "customFields",
      "stock",
      "metaTitle",
      "metaDescription",
      "metaKeywords",
      "purchaseSteps"
    ],
    product_media: ["media"],
    media: ["thumbnails", "width", "height", "url"],
    media_thumbnail: ["url", "width", "height", "id"],
    calculated_price: ["unitPrice", "quantity", "listPrice"],
    product_group_option: ["id", "group", "translated", "name"],
    product_group: ["id", "translated", "name"],
    product_listing: [
      "sorting",
      "currentFilters",
      "elements",
      "page",
      "limit",
      "sortings",
      "availableSortings",
      "total",
      "aggregations"
    ],
    property_group: ["id", "translated", "options", "name", "displayType"],
    property_group_option: [
      "translated",
      "name",
      "id",
      "colorHexCode",
      "media",
      "group"
    ],
    product_manufacturer: ["translated", "link", "name", "id"]
  }
};
var useProductListing = {
  limit: 10,
  includes: {
    product: [
      "name",
      "ratingAverage",
      "calculatedCheapestPrice",
      "calculatedPrice",
      "calculatedPrices",
      "calculatedListingPrice",
      "cover",
      "id",
      "translated",
      "options",
      "seoUrls"
    ],
    product_media: ["media"],
    media: ["thumbnails", "width", "height", "url"],
    calculated_price: ["unitPrice", "quantity", "listPrice"],
    product_group_option: ["name", "id", "group", "translated"],
    product_group: ["id", "name", "options", "translated"],
    property_group: ["id", "translated", "options", "name"],
    property_group_option: [
      "translated",
      "name",
      "id",
      "colorHexCode",
      "media",
      "group"
    ]
  }
};
var useProductReviews = {
  sort: [
    {
      field: "createdAt",
      order: "desc"
    }
  ]
};
var useProductQuickSearch = {
  limit: 10,
  includes: {
    calculated_price: ["unitPrice", "quantity", "listPrice"]
  }
};
var useListing = {
  limit: 10,
  includes: {
    product: [
      "name",
      "ratingAverage",
      "calculatedPrice",
      "calculatedPrices",
      "calculatedListingPrice",
      "calculatedCheapestPrice",
      "cover",
      "id",
      "translated",
      "options",
      "seoUrls"
    ],
    product_media: ["media"],
    media: ["thumbnails", "width", "height", "url"],
    calculated_price: ["unitPrice", "quantity", "listPrice"],
    product_group_option: ["name", "id", "group", "translated"],
    product_group: ["id", "name", "options", "translated"],
    property_group: ["id", "translated", "options", "name"],
    property_group_option: [
      "name",
      "translated",
      "id",
      "colorHexCode",
      "media",
      "group"
    ]
  }
};
var useProduct2 = {
  associations: {
    crossSellings: {
      associations: {
        assignedProducts: {
          associations: {
            product: {
              associations: {
                media: {},
                cover: {},
                seoUrls: {}
              }
            }
          }
        }
      }
    },
    media: {
      sort: [
        {
          field: "position",
          order: "ASC",
          naturalSorting: false
        }
      ]
    }
  },
  includes: {
    product: [
      "name",
      "ratingAverage",
      "calculatedPrice",
      "calculatedPrices",
      "calculatedListingPrice",
      "cover",
      "id",
      "parentId",
      "translated",
      "media",
      "seoUrls",
      "crossSellings",
      "availableStock",
      "customFields"
    ],
    product_media: ["media"],
    media: ["url"],
    media_thumbnail: ["url", "width", "height", "id"],
    calculated_price: ["unitPrice", "quantity", "listPrice"],
    product_group_option: ["name", "id", "group", "translated"],
    product_group: ["id", "name", "translated"]
  }
};
var useNavigation2 = {
  associations: {
    media: {},
    seoUrls: {}
  },
  includes: {
    category: [
      "seoUrls",
      "externalLink",
      "name",
      "id",
      "children",
      "translated",
      "type",
      "media"
    ],
    seo_url: ["pathInfo", "seoPathInfo"]
  }
};
var useOrderDetails = {
  limit: 1,
  includes: {
    calculated_price: ["unitPrice", "quantity", "listPrice"]
  },
  associations: {
    lineItems: {},
    addresses: {},
    transactions: {
      sort: "-createdAt",
      associations: {
        paymentMethod: {}
      }
    },
    deliveries: {
      associations: {
        shippingMethod: {}
      }
    }
  }
};
var useCustomerOrders2 = {
  limit: 10,
  aggregations: [
    {
      name: "count-id",
      type: "count",
      field: "id"
    }
  ],
  sort: [
    {
      field: "createdAt",
      order: "desc"
    }
  ],
  associations: {},
  includes: {
    order: [
      "id",
      "orderNumber",
      "amountTotal",
      "orderDateTime",
      "stateMachineState",
      "translated"
    ],
    state_machine_state: ["id", "technicalName", "name", "translated"]
  }
};
var useCustomerAddresses2 = {
  associations: {
    salutation: {}
  },
  includes: {
    customer_address: [
      "firstName",
      "lastName",
      "city",
      "zipcode",
      "country",
      "countryId",
      "id",
      "phoneNumber",
      "state",
      "salutation",
      "salutationId",
      "street"
    ],
    country: ["name", "id", "translated"],
    salutation: ["salutationKey", "displayName", "translated", "id"]
  }
};
var useUser2 = {
  associations: {
    salutation: {},
    addresses: {}
  },
  includes: {
    customer: [
      "active",
      "doubleOptInRegistration",
      "doubleOptInConfirmDate",
      "id",
      "salutation",
      "firstName",
      "lastName",
      "email",
      "guest",
      "addresses",
      "defaultBillingAddressId",
      "defaultShippingAddressId",
      "orderCount"
    ]
  }
};
var useCart2 = {
  includes: {},
  associations: {},
  getProductItemsSeoUrlsData: {
    includes: {
      product: ["id", "seoUrls"],
      seo_url: ["seoPathInfo"]
    },
    associations: {
      seoUrls: {}
    }
  }
};
var defaultApiParams_default = {
  useCms: useCms2,
  useProductListing,
  useProductReviews,
  useProductQuickSearch,
  useListing,
  useProduct: useProduct2,
  useNavigation: useNavigation2,
  useOrderDetails,
  useCustomerOrders: useCustomerOrders2,
  useCustomerAddresses: useCustomerAddresses2,
  useUser: useUser2,
  useCart: useCart2
};

// packages/composables/src/getDefaultApiParams.ts
function getDefaultApiParams() {
  return defaultApiParams_default;
}

// packages/composables/src/logic/useListing.ts
var import_shopware_6_client15 = require("@shopware-pwa/shopware-6-client");
var import_vue_demi20 = require("vue-demi");
function useListing2(params) {
  const COMPOSABLE_NAME = "useListing";
  const contextName = COMPOSABLE_NAME;
  const listingType = (params == null ? void 0 : params.listingType) || "categoryListing";
  const { getDefaults } = useDefaults({ defaultsKey: contextName });
  const { apiInstance } = getApplicationContext({ contextName });
  let searchMethod;
  if (listingType === "productSearchListing") {
    searchMethod = (searchCriteria) => __async(this, null, function* () {
      return (0, import_shopware_6_client15.searchProducts)(searchCriteria, apiInstance);
    });
  } else {
    const { resourceIdentifier: defaultIdentifier } = useCms();
    const { isVueComponent } = useVueContext();
    const cmsPage = isVueComponent && (0, import_vue_demi20.inject)("cms-page") || null;
    const resourceIdentifier = (0, import_vue_demi20.computed)(() => {
      var _a, _b;
      return (_b = (_a = cmsPage == null ? void 0 : cmsPage.value) == null ? void 0 : _a.resourceIdentifier) != null ? _b : defaultIdentifier.value;
    });
    searchMethod = (searchCriteria) => __async(this, null, function* () {
      if (!resourceIdentifier.value) {
        throw new Error("[useListing][search] Search category id does not exist.");
      }
      return (0, import_shopware_6_client15.getCategoryProducts)(resourceIdentifier.value, searchCriteria, apiInstance);
    });
  }
  return createListingComposable({
    listingKey: listingType,
    searchMethod,
    searchDefaults: getDefaults()
  });
}

// packages/composables/src/logic/useProductQuickSearch.ts
var import_shopware_6_client16 = require("@shopware-pwa/shopware-6-client");
var import_vue_demi21 = require("vue-demi");
function useProductQuickSearch2() {
  const COMPOSABLE_NAME = "useProductQuickSearch";
  const contextName = COMPOSABLE_NAME;
  const { getDefaults } = useDefaults({ defaultsKey: contextName });
  const { apiInstance } = getApplicationContext({ contextName });
  const searchTerm = (0, import_vue_demi21.ref)("");
  const listingKey = "productQuickSearch";
  const searchMethod = (searchCriteria) => __async(this, null, function* () {
    return (0, import_shopware_6_client16.searchSuggestedProducts)(searchCriteria, apiInstance);
  });
  const listingComposable = createListingComposable({
    listingKey,
    searchMethod,
    searchDefaults: getDefaults()
  });
  const search = (..._0) => __async(this, [..._0], function* (additionalCriteria = {}) {
    const searchCriteria = __spreadValues({
      query: searchTerm.value
    }, additionalCriteria);
    return listingComposable.search(searchCriteria, {
      preventRouteChange: true
    });
  });
  return {
    searchTerm,
    loading: listingComposable.loading,
    search,
    loadMore: listingComposable.loadMore,
    getProducts: listingComposable.getElements,
    getTotal: listingComposable.getTotal
  };
}

// packages/composables/src/factories/createListingComposable.ts
var import_helpers3 = require("@shopware-pwa/helpers");
var import_vue_demi22 = require("vue-demi");
var import_merge3 = __toESM(require("lodash/merge"));
function createListingComposable({
  searchMethod,
  searchDefaults,
  listingKey
}) {
  const COMPOSABLE_NAME = "createListingComposable";
  const contextName = COMPOSABLE_NAME;
  const { router } = getApplicationContext({ contextName });
  const { isVueComponent } = useVueContext();
  const cmsContext = isVueComponent && (0, import_vue_demi22.inject)("swCmsContext", null);
  const cacheKey = cmsContext ? `${contextName}(cms-${cmsContext})` : contextName;
  const loading = (0, import_vue_demi22.ref)(false);
  const loadingMore = (0, import_vue_demi22.ref)(false);
  const { sharedRef } = useSharedState();
  const _storeInitialListing = sharedRef(`${cacheKey}-initialListing-${listingKey}`);
  const _storeAppliedListing = sharedRef(`${cacheKey}-appliedListing-${listingKey}`);
  const getInitialListing = (0, import_vue_demi22.computed)(() => _storeInitialListing.value);
  const setInitialListing = (initialListing) => __async(this, null, function* () {
    var _a, _b, _c, _d;
    if (((_b = (_a = initialListing == null ? void 0 : initialListing.currentFilters) == null ? void 0 : _a.manufacturer) == null ? void 0 : _b.length) || ((_d = (_c = initialListing == null ? void 0 : initialListing.currentFilters) == null ? void 0 : _c.properties) == null ? void 0 : _d.length)) {
      loading.value = true;
      const allFiltersResult = yield searchMethod({
        query: initialListing.currentFilters.search || void 0
      });
      initialListing = Object.assign({}, initialListing, {
        aggregations: allFiltersResult == null ? void 0 : allFiltersResult.aggregations
      });
    }
    _storeInitialListing.value = initialListing;
    _storeAppliedListing.value = null;
    loading.value = false;
  });
  const initSearch = (criteria) => __async(this, null, function* () {
    loading.value = true;
    try {
      const searchCriteria = (0, import_merge3.default)({}, searchDefaults, criteria);
      const result = yield searchMethod(searchCriteria);
      yield setInitialListing(result);
    } catch (e) {
      throw e;
    } finally {
      loading.value = false;
    }
  });
  const search = (criteria, options) => __async(this, null, function* () {
    loading.value = true;
    const changeRoute = (options == null ? void 0 : options.preventRouteChange) !== true && !cmsContext;
    try {
      changeRoute && router.replace({
        query: __spreadValues({}, criteria)
      }).catch(() => {
      });
      const searchCriteria = (0, import_merge3.default)({}, searchDefaults, criteria);
      const result = yield searchMethod(searchCriteria);
      const allFiltersResult = yield searchMethod({
        query: searchCriteria.query,
        includes: { product_listing: ["aggregations"] }
      });
      _storeAppliedListing.value = Object.assign({}, result, {
        aggregations: Object.assign({}, result == null ? void 0 : result.aggregations, allFiltersResult == null ? void 0 : allFiltersResult.aggregations)
      });
    } catch (e) {
      throw e;
    } finally {
      loading.value = false;
    }
  });
  const loadMore = () => __async(this, null, function* () {
    var _a;
    loadingMore.value = true;
    try {
      const query = __spreadProps(__spreadValues({}, router.currentRoute.query), {
        p: getCurrentPage.value + 1
      });
      const searchCriteria = (0, import_merge3.default)({}, searchDefaults, query);
      const result = yield searchMethod(searchCriteria);
      _storeAppliedListing.value = __spreadProps(__spreadValues({}, getCurrentListing.value), {
        page: result.page,
        elements: [
          ...((_a = getCurrentListing.value) == null ? void 0 : _a.elements) || [],
          ...result.elements
        ]
      });
    } catch (e) {
      throw e;
    } finally {
      loadingMore.value = false;
    }
  });
  const getCurrentListing = (0, import_vue_demi22.computed)(() => {
    return _storeAppliedListing.value || getInitialListing.value;
  });
  const getElements = (0, import_vue_demi22.computed)(() => {
    var _a;
    return ((_a = getCurrentListing.value) == null ? void 0 : _a.elements) || [];
  });
  const getTotal = (0, import_vue_demi22.computed)(() => {
    var _a;
    return ((_a = getCurrentListing.value) == null ? void 0 : _a.total) || 0;
  });
  const getLimit = (0, import_vue_demi22.computed)(() => {
    var _a;
    return ((_a = getCurrentListing.value) == null ? void 0 : _a.limit) || (searchDefaults == null ? void 0 : searchDefaults.limit) || 10;
  });
  const getTotalPagesCount = (0, import_vue_demi22.computed)(() => Math.ceil(getTotal.value / getLimit.value));
  const getSortingOrders = (0, import_vue_demi22.computed)(() => {
    var _a, _b;
    const oldSortings = Object.values(((_a = getCurrentListing.value) == null ? void 0 : _a.sortings) || {});
    return ((_b = getCurrentListing.value) == null ? void 0 : _b.availableSortings) || oldSortings;
  });
  const getCurrentSortingOrder = (0, import_vue_demi22.computed)(() => {
    var _a;
    return (_a = getCurrentListing.value) == null ? void 0 : _a.sorting;
  });
  const changeCurrentSortingOrder = (order) => __async(this, null, function* () {
    const query = __spreadProps(__spreadValues({}, router.currentRoute.query), {
      order
    });
    yield search(query);
  });
  const getCurrentPage = (0, import_vue_demi22.computed)(() => {
    var _a;
    return ((_a = getCurrentListing.value) == null ? void 0 : _a.page) || 1;
  });
  const changeCurrentPage = (pageNumber) => __async(this, null, function* () {
    const query = __spreadProps(__spreadValues({}, router.currentRoute.query), {
      p: pageNumber || 1
    });
    yield search(query);
  });
  const getAvailableFilters = (0, import_vue_demi22.computed)(() => {
    var _a;
    return (0, import_helpers3.getListingFilters)((_a = getCurrentListing.value) == null ? void 0 : _a.aggregations);
  });
  const getCurrentFilters = (0, import_vue_demi22.computed)(() => {
    var _a;
    const currentFiltersResult = {};
    const currentFilters = __spreadValues(__spreadValues({}, (_a = getCurrentListing.value) == null ? void 0 : _a.currentFilters), router.currentRoute.query);
    Object.keys(currentFilters).forEach((objectKey) => {
      if (!currentFilters[objectKey])
        return;
      if (objectKey === "navigationId")
        return;
      if (objectKey === "price") {
        if (currentFilters[objectKey].min)
          currentFiltersResult["min-price"] = currentFilters[objectKey].min;
        if (currentFilters[objectKey].max)
          currentFiltersResult["max-price"] = currentFilters[objectKey].max;
        return;
      }
      if (objectKey === "p")
        return;
      currentFiltersResult[objectKey] = currentFilters[objectKey];
    });
    return currentFiltersResult;
  });
  return {
    getInitialListing,
    setInitialListing,
    initSearch,
    search,
    getCurrentListing,
    getElements,
    getSortingOrders,
    getCurrentSortingOrder,
    changeCurrentSortingOrder,
    getCurrentPage,
    changeCurrentPage,
    getTotal,
    getTotalPagesCount,
    getLimit,
    getAvailableFilters,
    getCurrentFilters,
    loading: (0, import_vue_demi22.computed)(() => loading.value),
    loadMore,
    loadingMore: (0, import_vue_demi22.computed)(() => loadingMore.value)
  };
}

// packages/composables/src/logic/useWishlist.ts
var import_vue_demi23 = require("vue-demi");
function useWishlist(params) {
  const COMPOSABLE_NAME = "useWishlist";
  const contextName = COMPOSABLE_NAME;
  const product = (0, import_vue_demi23.unref)(params == null ? void 0 : params.product);
  const { broadcast, intercept } = useIntercept();
  getApplicationContext({ contextName });
  const { sharedRef } = useSharedState();
  const _wishlistItems = sharedRef(`sw-${contextName}-items`);
  const productId = (0, import_vue_demi23.ref)(product == null ? void 0 : product.id);
  const onAddToWishlist = (fn) => intercept(INTERCEPTOR_KEYS.ADD_TO_WISHLIST, fn);
  const updateStorage = () => {
    localStorage.setItem("sw-wishlist-items", JSON.stringify(_wishlistItems.value));
  };
  const getFromStorage = () => {
    var _a;
    if (typeof window != "undefined" && localStorage) {
      return JSON.parse((_a = localStorage.getItem("sw-wishlist-items")) != null ? _a : "[]");
    }
  };
  (0, import_vue_demi23.onMounted)(() => {
    var _a;
    if (!((_a = _wishlistItems.value) == null ? void 0 : _a.length)) {
      try {
        const currentWishlist = getFromStorage();
        if (Array.isArray(currentWishlist) && currentWishlist.length) {
          _wishlistItems.value = currentWishlist || [];
        }
      } catch (error) {
        console.error("useWishlist:getFromStorage", error);
      }
    }
  });
  const removeFromWishlist = (itemId) => {
    var _a;
    const id = productId.value || itemId;
    if (!id) {
      return;
    }
    _wishlistItems.value = ((_a = _wishlistItems.value) == null ? void 0 : _a.filter((itemId2) => itemId2 != id)) || [];
    updateStorage();
  };
  const addToWishlist = () => {
    if (!productId.value) {
      return;
    }
    _wishlistItems.value = _wishlistItems.value || [];
    if (!_wishlistItems.value.includes(productId.value)) {
      _wishlistItems.value.push(productId.value);
      updateStorage();
      broadcast(INTERCEPTOR_KEYS.ADD_TO_WISHLIST, {
        product
      });
    }
  };
  const isInWishlist = (0, import_vue_demi23.computed)(() => {
    var _a;
    return !!(productId.value && ((_a = _wishlistItems.value) == null ? void 0 : _a.includes(productId.value)));
  });
  const clearWishlist = () => {
    _wishlistItems.value = [];
    updateStorage();
  };
  const items = (0, import_vue_demi23.computed)(() => _wishlistItems.value || []);
  const count = (0, import_vue_demi23.computed)(() => items.value.length);
  return {
    addToWishlist,
    removeFromWishlist,
    isInWishlist,
    clearWishlist,
    items,
    count,
    onAddToWishlist
  };
}

// packages/composables/src/hooks/useCountry.ts
var import_vue_demi24 = require("vue-demi");
function useCountry(props) {
  const { getCountries } = useCountries();
  const countryId = props.countryId;
  const currentCountry = (0, import_vue_demi24.computed)(() => {
    var _a;
    if (!countryId.value)
      return null;
    return (_a = getCountries.value.find((country) => country.id === countryId.value)) != null ? _a : null;
  });
  const displayState = (0, import_vue_demi24.computed)(() => {
    var _a, _b;
    return (_b = (_a = currentCountry.value) == null ? void 0 : _a.forceStateInRegistration) != null ? _b : false;
  });
  const forceState = (0, import_vue_demi24.computed)(() => {
    var _a, _b;
    return (_b = (_a = currentCountry.value) == null ? void 0 : _a.forceStateInRegistration) != null ? _b : false;
  });
  return {
    currentCountry,
    displayState,
    forceState
  };
}

// packages/composables/src/logic/useProductConfigurator.ts
var import_vue_demi25 = require("vue-demi");
var import_shopware_6_client17 = require("@shopware-pwa/shopware-6-client");
var import_helpers4 = require("@shopware-pwa/helpers");
function useProductConfigurator(params) {
  var _a, _b;
  const COMPOSABLE_NAME = "useProductConfigurator";
  const contextName = COMPOSABLE_NAME;
  const product = (0, import_vue_demi25.unref)(params.product);
  const { apiInstance } = getApplicationContext({ contextName });
  const { isVueComponent } = useVueContext();
  const { page: defaultPage } = useCms();
  const cmsPage = isVueComponent && (0, import_vue_demi25.inject)("cms-page") || null;
  const page = (0, import_vue_demi25.computed)(() => {
    var _a2;
    return (_a2 = cmsPage == null ? void 0 : cmsPage.value) != null ? _a2 : defaultPage.value;
  });
  const selected = (0, import_vue_demi25.ref)({});
  const isLoadingOptions = (0, import_vue_demi25.ref)(!!((_a = product.options) == null ? void 0 : _a.length));
  const parentProductId = (0, import_vue_demi25.computed)(() => product.parentId);
  const getOptionGroups = (0, import_vue_demi25.computed)(() => {
    var _a2;
    return ((_a2 = page.value) == null ? void 0 : _a2.configurator) || [];
  });
  const findGroupCodeForOption = (optionId) => {
    const group = getOptionGroups.value.find((optionGroup) => {
      const optionFound = optionGroup.options.find((option) => option.id === optionId);
      return !!optionFound;
    });
    return (0, import_helpers4.getTranslatedProperty)(group, "name");
  };
  (_b = product.optionIds) == null ? void 0 : _b.forEach((optionId) => {
    const optionGroupCode = findGroupCodeForOption(optionId);
    if (optionGroupCode) {
      selected.value[optionGroupCode] = optionId;
    }
  });
  const findVariantForSelectedOptions = (options) => __async(this, null, function* () {
    var _a2, _b2;
    const filter = [
      {
        type: "equals",
        field: "parentId",
        value: parentProductId.value
      },
      ...Object.values(options || selected.value).map((id) => ({
        type: "equals",
        field: "optionIds",
        value: id
      }))
    ];
    try {
      if (apiInstance) {
        apiInstance.defaults.headers.common["sw-include-seo-urls"] = "true";
      }
      const response = yield (0, import_shopware_6_client17.invokePost)({
        address: (0, import_shopware_6_client17.getProductEndpoint)(),
        payload: {
          limit: 1,
          filter,
          includes: {
            product: ["id", "translated", "productNumber", "seoUrls"],
            seo_url: ["seoPathInfo"]
          },
          associations: {
            seoUrls: {}
          }
        }
      }, apiInstance);
      return (_b2 = (_a2 = response == null ? void 0 : response.data) == null ? void 0 : _a2.elements) == null ? void 0 : _b2[0];
    } catch (e) {
      console.error("SwProductDetails:findVariantForSelectedOptions", e);
    }
  });
  const handleChange = (group, option, onChangeHandled) => __async(this, null, function* () {
    selected.value = Object.assign({}, selected.value, {
      [group]: option
    });
    if (typeof onChangeHandled === "function") {
      yield onChangeHandled();
    }
  });
  return {
    handleChange,
    findVariantForSelectedOptions,
    isLoadingOptions,
    getOptionGroups,
    getSelectedOptions: selected
  };
}

// packages/composables/src/logic/useBreadcrumbs.ts
var import_vue_demi26 = require("vue-demi");
function useBreadcrumbs(params) {
  const COMPOSABLE_NAME = "useBreadcrumbs";
  const contextName = COMPOSABLE_NAME;
  const { isVueComponent } = useVueContext();
  const cmsContext = isVueComponent && (0, import_vue_demi26.inject)("swCmsContext", null);
  const { i18n } = getApplicationContext({ contextName });
  const { sharedRef } = useSharedState();
  const cacheKey = cmsContext ? `${contextName}(cms-${cmsContext})` : contextName;
  const _sharedBreadcrumbs = sharedRef(`${cacheKey}-breadcrumbs`);
  const clear = () => {
    _sharedBreadcrumbs.value = [];
  };
  const setBreadcrumbs = (breadcrumbs) => {
    _sharedBreadcrumbs.value = breadcrumbs || [];
  };
  return {
    clear,
    setBreadcrumbs,
    breadcrumbs: (0, import_vue_demi26.computed)(() => {
      var _a;
      if (!!(params == null ? void 0 : params.hideHomeLink) || !((_a = _sharedBreadcrumbs.value) == null ? void 0 : _a.length))
        return _sharedBreadcrumbs.value || [];
      return [
        {
          name: i18n.t("Home"),
          path: "/"
        },
        ..._sharedBreadcrumbs.value
      ];
    })
  };
}

// packages/composables/src/logic/useProductAssociations.ts
var import_vue_demi27 = require("vue-demi");
var import_shopware_6_client18 = require("@shopware-pwa/shopware-6-client");
function useProductAssociations(params) {
  const COMPOSABLE_NAME = "useProductAssociations";
  const contextName = COMPOSABLE_NAME;
  const product = (0, import_vue_demi27.unref)(params.product);
  const association = params.associationContext;
  const { apiInstance } = getApplicationContext({ contextName });
  const isLoading = (0, import_vue_demi27.ref)(false);
  const associations = (0, import_vue_demi27.ref)([]);
  const loadAssociations = (..._0) => __async(this, [..._0], function* ({
    method,
    params: params2
  } = {}) {
    isLoading.value = true;
    try {
      if (method && method === "get") {
        const response2 = yield (0, import_shopware_6_client18.invokeGet)({
          address: `${(0, import_shopware_6_client18.getProductDetailsEndpoint)(product.id)}/${association}${params2 ? params2 : ""}`
        }, apiInstance);
        associations.value = response2 == null ? void 0 : response2.data;
        return;
      }
      const response = yield (0, import_shopware_6_client18.invokePost)({
        address: `${(0, import_shopware_6_client18.getProductDetailsEndpoint)(product.id)}/${association}`,
        payload: params2
      }, apiInstance);
      associations.value = response == null ? void 0 : response.data;
    } catch (error) {
      console.error("[useProductAssociations][loadAssociations][error]:", error);
    } finally {
      isLoading.value = false;
    }
  });
  return {
    isLoading: (0, import_vue_demi27.computed)(() => isLoading.value),
    productAssociations: (0, import_vue_demi27.computed)(() => associations.value || []),
    loadAssociations
  };
}

// packages/composables/src/logic/useProductReviews.ts
var import_vue_demi28 = require("vue-demi");
var import_shopware_6_client19 = require("@shopware-pwa/shopware-6-client");
function useProductReviews2(params) {
  const COMPOSABLE_NAME = "useProductReviews";
  const contextName = COMPOSABLE_NAME;
  const product = (0, import_vue_demi28.unref)(params.product);
  const { apiInstance } = getApplicationContext({ contextName });
  const { getDefaults } = useDefaults({ defaultsKey: contextName });
  const wasReviewSent = (0, import_vue_demi28.ref)(false);
  const isSendingReview = (0, import_vue_demi28.ref)(false);
  const errors = (0, import_vue_demi28.reactive)({
    loadProductReviews: [],
    addReview: []
  });
  const productReviews = (0, import_vue_demi28.ref)(null);
  const loadProductReviews = (..._0) => __async(this, [..._0], function* (parameters = {}) {
    var _a, _b;
    try {
      const fetchedReviews = yield (0, import_shopware_6_client19.getProductReviews)(product.id, Object.assign({}, getDefaults(), parameters), apiInstance);
      productReviews.value = (_b = (_a = fetchedReviews.elements) == null ? void 0 : _a.map(({ id, externalUser, customerId, createdAt, content, points }) => ({
        id,
        author: externalUser ? externalUser : customerId,
        date: createdAt,
        message: content,
        rating: points
      }))) != null ? _b : [];
    } catch (e) {
      const err = e;
      errors.loadProductReviews = err.messages;
    }
  });
  const addReview = (data) => __async(this, null, function* () {
    isSendingReview.value = true;
    try {
      yield (0, import_shopware_6_client19.addProductReview)(product.id, data, apiInstance);
      wasReviewSent.value = true;
    } catch (error) {
      console.error("[SwAddProductReview][submitForm]: ", error);
      errors.addReview = error.messages;
    }
    isSendingReview.value = false;
  });
  return {
    productReviews,
    loadProductReviews,
    wasReviewSent,
    addReview,
    isSendingReview,
    errors
  };
}

// packages/composables/src/logic/useSharedState.ts
var import_vue_demi29 = require("vue-demi");
var localSharedState = {};
function useSharedState() {
  const COMPOSABLE_NAME = "useSharedState";
  const contextName = COMPOSABLE_NAME;
  const { sharedStore, isServer, devtools } = getApplicationContext({
    contextName
  });
  if (!sharedStore)
    throw new Error(`[${COMPOSABLE_NAME}] sharedStore is not injected into Vue instance`);
  function sharedRef(uniqueKey, defaultValue) {
    var _a;
    if (!isServer && !localSharedState[uniqueKey]) {
      localSharedState[uniqueKey] = (0, import_vue_demi29.ref)(sharedStore[uniqueKey]);
    }
    const sharedRef2 = isServer ? (0, import_vue_demi29.toRef)(sharedStore, uniqueKey) : localSharedState[uniqueKey];
    (_a = sharedRef2.value) != null ? _a : sharedRef2.value = defaultValue != null ? defaultValue : null;
    return (0, import_vue_demi29.computed)({
      get: () => sharedRef2.value,
      set: (val) => {
        sharedRef2.value = val;
        devtools == null ? void 0 : devtools._internal.updateSharedState(localSharedState);
      }
    });
  }
  function preloadRef(refObject, callback) {
    return __async(this, null, function* () {
      if (!refObject.value) {
        if (isServer && (0, import_vue_demi29.getCurrentInstance)()) {
          (0, import_vue_demi29.onServerPrefetch)(() => __async(this, null, function* () {
            yield callback();
          }));
          return;
        }
        yield callback();
      }
    });
  }
  return {
    sharedRef,
    preloadRef
  };
}

// packages/composables/src/logic/useOrderDetails.ts
var import_vue_demi30 = require("vue-demi");
var import_shopware_6_client20 = require("@shopware-pwa/shopware-6-client");
function useOrderDetails2(params) {
  const COMPOSABLE_NAME = "useOrderDetails";
  const contextName = COMPOSABLE_NAME;
  const order = (0, import_vue_demi30.unref)(params.order);
  const { apiInstance } = getApplicationContext({ contextName });
  const { getDefaults } = useDefaults({ defaultsKey: contextName });
  const { broadcast } = useIntercept();
  const { sharedRef } = useSharedState();
  const _sharedOrder = sharedRef(`sw-${contextName}-order`, order);
  const errors = (0, import_vue_demi30.reactive)({
    loadOrderDetails: [],
    handlePayment: [],
    cancel: [],
    changePaymentMethod: []
  });
  const loaders = (0, import_vue_demi30.reactive)({
    loadOrderDetails: false,
    handlePayment: false,
    cancel: false,
    changePaymentMethod: false
  });
  const orderId = order == null ? void 0 : order.id;
  const paymentMethod = (0, import_vue_demi30.computed)(() => {
    var _a, _b, _c;
    return (_c = (_b = (_a = _sharedOrder.value) == null ? void 0 : _a.transactions) == null ? void 0 : _b[0]) == null ? void 0 : _c.paymentMethod;
  });
  const shippingMethod = (0, import_vue_demi30.computed)(() => {
    var _a, _b, _c;
    return (_c = (_b = (_a = _sharedOrder.value) == null ? void 0 : _a.deliveries) == null ? void 0 : _b[0]) == null ? void 0 : _c.shippingMethod;
  });
  const paymentUrl = (0, import_vue_demi30.ref)();
  const personalDetails = (0, import_vue_demi30.computed)(() => {
    var _a, _b, _c, _d, _e, _f;
    return {
      email: (_b = (_a = _sharedOrder.value) == null ? void 0 : _a.orderCustomer) == null ? void 0 : _b.email,
      firstName: (_d = (_c = _sharedOrder.value) == null ? void 0 : _c.orderCustomer) == null ? void 0 : _d.firstName,
      lastName: (_f = (_e = _sharedOrder.value) == null ? void 0 : _e.orderCustomer) == null ? void 0 : _f.lastName
    };
  });
  const billingAddress = (0, import_vue_demi30.computed)(() => {
    var _a, _b;
    return (_b = (_a = _sharedOrder.value) == null ? void 0 : _a.addresses) == null ? void 0 : _b.find(({ id }) => id === _sharedOrder.value.billingAddressId);
  });
  const shippingAddress = (0, import_vue_demi30.computed)(() => {
    var _a, _b, _c;
    return (_c = (_b = (_a = _sharedOrder.value) == null ? void 0 : _a.deliveries) == null ? void 0 : _b[0]) == null ? void 0 : _c.shippingOrderAddress;
  });
  const shippingCosts = (0, import_vue_demi30.computed)(() => {
    var _a;
    return (_a = _sharedOrder.value) == null ? void 0 : _a.shippingTotal;
  });
  const subtotal = (0, import_vue_demi30.computed)(() => {
    var _a, _b;
    return (_b = (_a = _sharedOrder.value) == null ? void 0 : _a.price) == null ? void 0 : _b.positionPrice;
  });
  const total = (0, import_vue_demi30.computed)(() => {
    var _a, _b;
    return (_b = (_a = _sharedOrder.value) == null ? void 0 : _a.price) == null ? void 0 : _b.totalPrice;
  });
  const status = (0, import_vue_demi30.computed)(() => {
    var _a, _b;
    return (_b = (_a = _sharedOrder.value) == null ? void 0 : _a.stateMachineState) == null ? void 0 : _b.name;
  });
  const loadOrderDetails = () => __async(this, null, function* () {
    loaders.loadOrderDetails = true;
    try {
      const orderDetailsResponse = yield (0, import_shopware_6_client20.getOrderDetails)(orderId, getDefaults(), apiInstance);
      _sharedOrder.value = orderDetailsResponse != null ? orderDetailsResponse : null;
      broadcast(INTERCEPTOR_KEYS.ORDER_DETAILS_LOADED, _sharedOrder.value);
    } catch (e) {
      const error = e;
      errors.loadOrderDetails = error.messages;
      broadcast(INTERCEPTOR_KEYS.ERROR, error);
    }
    loaders.loadOrderDetails = false;
  });
  const handlePayment = (finishUrl, errorUrl, paymentDetails) => __async(this, null, function* () {
    loaders.handlePayment = true;
    try {
      const resp = yield (0, import_shopware_6_client20.handlePayment)({
        orderId,
        finishUrl,
        errorUrl,
        paymentDetails
      }, apiInstance);
      paymentUrl.value = resp == null ? void 0 : resp.redirectUrl;
      broadcast(INTERCEPTOR_KEYS.ORDER_HANDLE_PAYMENT, resp);
    } catch (e) {
      const error = e;
      errors.handlePayment = error.messages;
      broadcast(INTERCEPTOR_KEYS.ERROR, error);
    }
    loaders.handlePayment = false;
  });
  const cancel = () => __async(this, null, function* () {
    loaders.cancel = true;
    try {
      const response = yield (0, import_shopware_6_client20.cancelOrder)(orderId, apiInstance);
      broadcast(INTERCEPTOR_KEYS.ORDER_CANCELLED, response);
    } catch (error) {
      errors.cancel = error.messages;
      broadcast(INTERCEPTOR_KEYS.ERROR, error);
    }
    loaders.cancel = false;
    yield loadOrderDetails();
  });
  const changePaymentMethod = (paymentMethodId) => __async(this, null, function* () {
    loaders.changePaymentMethod = true;
    try {
      yield (0, import_shopware_6_client20.changeOrderPaymentMethod)(orderId, paymentMethodId, apiInstance);
      broadcast(INTERCEPTOR_KEYS.ORDER_PAYMENT_METHOD_CHANGED, order);
    } catch (error) {
      errors.changePaymentMethod = error.messages;
      broadcast(INTERCEPTOR_KEYS.ERROR, error);
    }
    loaders.changePaymentMethod = false;
    yield loadOrderDetails();
  });
  return {
    order: (0, import_vue_demi30.computed)(() => _sharedOrder.value),
    status,
    total,
    subtotal,
    shippingCosts,
    shippingAddress,
    billingAddress,
    personalDetails,
    paymentUrl,
    shippingMethod,
    paymentMethod,
    errors,
    loaders,
    loadOrderDetails,
    handlePayment,
    cancel,
    changePaymentMethod
  };
}

// packages/composables/src/getVueContext.ts
var import_vue_demi31 = require("vue-demi");

// packages/composables/src/internalHelpers/getContextProperty.ts
function getContextProperty(object, name) {
  return (object == null ? void 0 : object[`$${name}`]) || (object == null ? void 0 : object[name]);
}

// packages/composables/src/getVueContext.ts
function extendScopeContext(scope, app) {
  scope.vm.shopwareApiInstance = getContextProperty(app, "shopwareApiInstance");
  scope.vm.sharedStore = getContextProperty(app, "sharedStore");
  scope.vm.interceptors = getContextProperty(app, "interceptors");
  scope.vm.shopwareDefaults = getContextProperty(app, "shopwareDefaults");
  scope.vm.i18n = getContextProperty(app, "i18n");
  scope.vm.routing = getContextProperty(app, "routing");
  scope.vm.shopware = getContextProperty(app, "shopware");
}
function useVueContext() {
  var _a, _b;
  const vueComponentInstance = (_a = (0, import_vue_demi31.getCurrentInstance)()) == null ? void 0 : _a.proxy;
  const vueScopeInstance = (_b = (0, import_vue_demi31.getCurrentScope)()) == null ? void 0 : _b.vm;
  return {
    isVueComponent: !!vueComponentInstance,
    isVueScope: !!vueScopeInstance
  };
}

// packages/composables/src/appContext.ts
var import_vue_demi32 = require("vue-demi");
function getApplicationContext(params) {
  var _a, _b, _c;
  const key = (params == null ? void 0 : params.contextName) || "getApplicationContext";
  const injectedContext = (_a = (0, import_vue_demi32.getCurrentInstance)()) == null ? void 0 : _a.proxy;
  const scopeContext = (_c = (_b = import_vue_demi32.getCurrentScope) == null ? void 0 : _b()) == null ? void 0 : _c.vm;
  let context = scopeContext || injectedContext;
  const injectedShopwareContext = injectedContext && (0, import_vue_demi32.inject)("shopware", null);
  const shopwareContext = injectedShopwareContext || getContextProperty(context, "shopware");
  if (!shopwareContext) {
    console.warn(`[${key}] Use createShopware method to setup composables.`);
  } else {
    return {
      apiInstance: shopwareContext.apiInstance,
      router: getContextProperty(context, "router"),
      route: getContextProperty(context, "route"),
      routing: getContextProperty(context, "routing"),
      i18n: getContextProperty(context, "i18n"),
      cookies: getContextProperty(context, "cookies"),
      shopwareDefaults: shopwareContext.state.shopwareDefaults,
      interceptors: shopwareContext.state.interceptors,
      sharedStore: shopwareContext.state.sharedStore,
      devtools: shopwareContext.devtools,
      isServer: !!(getContextProperty(context, "isServer") || typeof process !== "undefined" && !!process.server),
      contextName: key
    };
  }
  return {
    apiInstance: getContextProperty(context, "shopwareApiInstance"),
    router: getContextProperty(context, "router"),
    route: getContextProperty(context, "route"),
    routing: getContextProperty(context, "routing"),
    i18n: getContextProperty(context, "i18n"),
    cookies: getContextProperty(context, "cookies"),
    shopwareDefaults: getContextProperty(context, "shopwareDefaults"),
    interceptors: getContextProperty(context, "interceptors"),
    sharedStore: getContextProperty(context, "sharedStore"),
    isServer: !!(getContextProperty(context, "isServer") || typeof process !== "undefined" && !!process.server),
    contextName: key
  };
}

// packages/composables/src/devtools/vue2.ts
var ShopwareVuePlugin = function(_Vue, pluginOptions) {
  _Vue.mixin({
    beforeCreate() {
      const options = this.$options;
      if (options.shopware) {
        const shopware = options.shopware;
        if (!this._provided) {
          const provideCache = {};
          Object.defineProperty(this, "_provided", {
            get: () => provideCache,
            set: (v) => Object.assign(provideCache, v)
          });
        }
        this._provided[shopwareSymbol] = shopware;
        if (!this.$shopware) {
          this.$shopware = shopware;
        }
        shopware._a = this;
        if ((pluginOptions == null ? void 0 : pluginOptions.enableDevtools) && typeof window !== "undefined") {
          const devtools = registerShopwareDevtools(shopware._a, shopware);
          shopware.devtools = devtools;
        }
      } else if (!this.$shopware && options.parent && options.parent.$shopware) {
        this.$shopware = options.parent.$shopware;
      }
    }
  });
};

// packages/composables/src/index.ts
function createShopware(app, options) {
  const scope = (0, import_vue_demi33.effectScope)(true);
  const state = scope.run(() => {
    return (0, import_vue_demi33.reactive)({
      interceptors: {},
      sharedStore: options.initialStore || (0, import_vue_demi33.reactive)({}),
      shopwareDefaults: options.shopwareDefaults || {}
    });
  });
  const shopwarePlugin = (0, import_vue_demi33.markRaw)({
    install(app2, options2) {
      if (!import_vue_demi33.isVue2) {
        shopwarePlugin._a = app2;
        app2.config.globalProperties.$shopware = shopwarePlugin;
        app2.provide("shopware", shopwarePlugin);
        if ((options2 == null ? void 0 : options2.enableDevtools) && typeof window !== "undefined") {
          registerShopwareDevtools(app2, shopwarePlugin);
        }
      }
    },
    _a: app,
    _e: scope,
    apiInstance: options.apiInstance,
    state
  });
  if (!import_vue_demi33.isVue2 && (options == null ? void 0 : options.enableDevtools) && typeof window !== "undefined") {
    registerShopwareDevtools(app, shopwarePlugin);
  }
  return shopwarePlugin;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  INTERCEPTOR_KEYS,
  ShopwareVuePlugin,
  createListingComposable,
  createShopware,
  extendScopeContext,
  getApplicationContext,
  getDefaultApiParams,
  useAddToCart,
  useBreadcrumbs,
  useCart,
  useCartItem,
  useCheckout,
  useCms,
  useCountries,
  useCountry,
  useCurrency,
  useCustomerAddresses,
  useCustomerOrders,
  useCustomerPassword,
  useDefaults,
  useIntercept,
  useListing,
  useNavigation,
  useNotifications,
  useOrderDetails,
  useProduct,
  useProductAssociations,
  useProductConfigurator,
  useProductQuickSearch,
  useProductReviews,
  useSalutations,
  useSessionContext,
  useSharedState,
  useUIState,
  useUser,
  useVueContext,
  useWishlist
});
