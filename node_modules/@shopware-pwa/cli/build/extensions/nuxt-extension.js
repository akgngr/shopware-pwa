// src/extensions/nuxt-extension.ts
var import_path = require("path");
var path = require("path");
module.exports = (toolbox) => {
  const {
    print: { spin },
    filesystem: { exists }
  } = toolbox;
  toolbox.generateNuxtProject = async () => {
    const spinner = spin("Preparing Nuxt project");
    const isNuxtGenerated = exists("nuxt.config.js");
    if (!isNuxtGenerated) {
      const baseDirectory = toolbox.plugin && toolbox.plugin.directory;
      let templateDirectory = `${baseDirectory}/templates`;
      if (!toolbox.filesystem.isDirectory(templateDirectory)) {
        templateDirectory = `${baseDirectory}/build/templates`;
      }
      const projectTemplatePath = (0, import_path.join)(templateDirectory, "project-template");
      await toolbox.filesystem.copyAsync(projectTemplatePath, ".", {
        overwrite: true
      });
      const gitIgnoreExists = await toolbox.filesystem.existsAsync("gitignore");
      if (gitIgnoreExists) {
        await toolbox.filesystem.moveAsync("gitignore", ".gitignore");
      }
      spinner.succeed();
      return true;
    } else {
      spinner.succeed("Preparing Nuxt project: project is already created. Remove `nuxt.config.js` to regenerate whole project.");
      return false;
    }
  };
  toolbox.generateTemplateFiles = async ({
    shopwareEndpoint,
    shopwareAccessToken,
    shopwareDomainsAllowList
  } = toolbox.inputParameters) => {
    const isConfigGenerated = exists("shopware-pwa.config.js");
    if (!isConfigGenerated) {
      const getShopwareDomainList = () => {
        let list = [];
        if (!shopwareDomainsAllowList) {
          list.push(shopwareEndpoint);
        }
        if (typeof shopwareDomainsAllowList === "string") {
          list.push(shopwareDomainsAllowList);
        }
        if (Array.isArray(shopwareDomainsAllowList)) {
          list = shopwareDomainsAllowList;
        }
        return list;
      };
      await toolbox.template.generate({
        template: "shopware-pwa.config.ejs",
        target: `shopware-pwa.config.js`,
        props: {
          shopwareEndpoint,
          shopwareAccessToken,
          shopwareDomainsAllowList: getShopwareDomainList()
        }
      });
    }
    const isEnvFileCreated = exists(".env");
    const isTemplateEnvFile = exists(".env.template");
    if (!isEnvFileCreated && isTemplateEnvFile) {
      await toolbox.filesystem.copyAsync(".env.template", ".env");
    }
  };
  toolbox.copyThemeFolder = async (folderName, destination) => {
    const dest = destination ? destination : folderName;
    const destinationExist = toolbox.filesystem.existsAsync(dest);
    if (destinationExist)
      return;
    return toolbox.filesystem.copyAsync(path.join(toolbox.getThemePath(), folderName), dest, { overwrite: true });
  };
};
