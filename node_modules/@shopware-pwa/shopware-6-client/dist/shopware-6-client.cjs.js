var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// packages/shopware-6-client/src/index.ts
var src_exports = {};
__export(src_exports, {
  addCartItems: () => addCartItems,
  addProductReview: () => addProductReview,
  addProductToCart: () => addProductToCart,
  addPromotionCode: () => addPromotionCode,
  addWishlistProduct: () => addWishlistProduct,
  cancelOrder: () => cancelOrder,
  changeCartItemQuantity: () => changeCartItemQuantity,
  changeOrderPaymentMethod: () => changeOrderPaymentMethod,
  clearCart: () => clearCart,
  config: () => config,
  confirmAccountRegistration: () => confirmAccountRegistration,
  confirmPasswordReset: () => confirmPasswordReset,
  createCustomerAddress: () => createCustomerAddress,
  createInstance: () => createInstance,
  createOrder: () => createOrder,
  deleteAccount: () => deleteAccount,
  deleteCustomerAddress: () => deleteCustomerAddress,
  getAddWishlistProductEndpoint: () => getAddWishlistProductEndpoint,
  getAvailableCountries: () => getAvailableCountries,
  getAvailableCurrencies: () => getAvailableCurrencies,
  getAvailableLanguages: () => getAvailableLanguages,
  getAvailablePaymentMethods: () => getAvailablePaymentMethods,
  getAvailableSalutations: () => getAvailableSalutations,
  getAvailableShippingMethods: () => getAvailableShippingMethods,
  getCancelOrderEndpoint: () => getCancelOrderEndpoint,
  getCart: () => getCart,
  getCategories: () => getCategories,
  getCategory: () => getCategory,
  getCategoryDetailsEndpoint: () => getCategoryDetailsEndpoint,
  getCategoryEndpoint: () => getCategoryEndpoint,
  getCategoryProducts: () => getCategoryProducts,
  getChangeOrderPaymentMethodEndpoint: () => getChangeOrderPaymentMethodEndpoint,
  getCheckoutCartEndpoint: () => getCheckoutCartEndpoint,
  getCheckoutCartLineItemEndpoint: () => getCheckoutCartLineItemEndpoint,
  getCheckoutOrderEndpoint: () => getCheckoutOrderEndpoint,
  getCmsPage: () => getCmsPage,
  getConfirmPasswordResetEndpoint: () => getConfirmPasswordResetEndpoint,
  getContactFormEndpoint: () => getContactFormEndpoint,
  getContextCountryEndpoint: () => getContextCountryEndpoint,
  getContextCurrencyEndpoint: () => getContextCurrencyEndpoint,
  getContextEndpoint: () => getContextEndpoint,
  getContextLanguageEndpoint: () => getContextLanguageEndpoint,
  getContextPaymentMethodEndpoint: () => getContextPaymentMethodEndpoint,
  getContextSalutationEndpoint: () => getContextSalutationEndpoint,
  getContextShippingMethodEndpoint: () => getContextShippingMethodEndpoint,
  getCustomer: () => getCustomer,
  getCustomerAccountConfirmEndpoint: () => getCustomerAccountConfirmEndpoint,
  getCustomerAddAddressEndpoint: () => getCustomerAddAddressEndpoint,
  getCustomerAddress: () => getCustomerAddress,
  getCustomerAddressEndpoint: () => getCustomerAddressEndpoint,
  getCustomerAddresses: () => getCustomerAddresses,
  getCustomerDefaultBillingAddressEndpoint: () => getCustomerDefaultBillingAddressEndpoint,
  getCustomerDefaultShippingAddressEndpoint: () => getCustomerDefaultShippingAddressEndpoint,
  getCustomerDeleteEndpoint: () => getCustomerDeleteEndpoint,
  getCustomerDetailsUpdateEndpoint: () => getCustomerDetailsUpdateEndpoint,
  getCustomerEndpoint: () => getCustomerEndpoint,
  getCustomerLoginEndpoint: () => getCustomerLoginEndpoint,
  getCustomerLogoutEndpoint: () => getCustomerLogoutEndpoint,
  getCustomerOrderEndpoint: () => getCustomerOrderEndpoint,
  getCustomerOrders: () => getCustomerOrders,
  getCustomerRegisterEndpoint: () => getCustomerRegisterEndpoint,
  getCustomerResetPasswordEndpoint: () => getCustomerResetPasswordEndpoint,
  getCustomerUpdateEmailEndpoint: () => getCustomerUpdateEmailEndpoint,
  getCustomerUpdatePasswordEndpoint: () => getCustomerUpdatePasswordEndpoint,
  getCustomerUpdatePaymentMethodEndpoint: () => getCustomerUpdatePaymentMethodEndpoint,
  getGetWishlistProductsEndpoint: () => getGetWishlistProductsEndpoint,
  getLandingPage: () => getLandingPage,
  getLandingPageDetailsEndpoint: () => getLandingPageDetailsEndpoint,
  getMergeWishlistProductsEndpoint: () => getMergeWishlistProductsEndpoint,
  getNewsletterRecipientEnpoint: () => getNewsletterRecipientEnpoint,
  getNewsletterSubscribeEndpoint: () => getNewsletterSubscribeEndpoint,
  getNewsletterUnsubscribeEndpoint: () => getNewsletterUnsubscribeEndpoint,
  getOrderDetails: () => getOrderDetails,
  getPageResolverEndpoint: () => getPageResolverEndpoint,
  getPaymentMethodDetails: () => getPaymentMethodDetails,
  getProduct: () => getProduct,
  getProductDetailsEndpoint: () => getProductDetailsEndpoint,
  getProductEndpoint: () => getProductEndpoint,
  getProductListingEndpoint: () => getProductListingEndpoint,
  getProductReviews: () => getProductReviews,
  getProductReviewsEndpoint: () => getProductReviewsEndpoint,
  getProducts: () => getProducts,
  getRemoveWishlistProductEndpoint: () => getRemoveWishlistProductEndpoint,
  getSearchEndpoint: () => getSearchEndpoint,
  getSeoUrl: () => getSeoUrl,
  getSeoUrlEndpoint: () => getSeoUrlEndpoint,
  getSeoUrls: () => getSeoUrls,
  getSessionContext: () => getSessionContext,
  getShippingMethodDetails: () => getShippingMethodDetails,
  getStoreNavigation: () => getStoreNavigation,
  getStoreNavigationEndpoint: () => getStoreNavigationEndpoint,
  getStoreNewsletterConfirmEndpoint: () => getStoreNewsletterConfirmEndpoint,
  getStoreNewsletterSubscribeEndpoint: () => getStoreNewsletterSubscribeEndpoint,
  getStoreNewsletterUnsubscribeEndpoint: () => getStoreNewsletterUnsubscribeEndpoint,
  getSuggestSearchEndpoint: () => getSuggestSearchEndpoint,
  getUserCountry: () => getUserCountry,
  getUserSalutation: () => getUserSalutation,
  getWishlistProducts: () => getWishlistProducts,
  handlePayment: () => handlePayment,
  handlePaymentEndpoint: () => handlePaymentEndpoint,
  invokeGet: () => invokeGet,
  invokePost: () => invokePost,
  isNewsletterSubscriber: () => isNewsletterSubscriber,
  login: () => login,
  logout: () => logout,
  mergeWishlistProducts: () => mergeWishlistProducts,
  newsletterSubscribe: () => newsletterSubscribe,
  newsletterUnsubscribe: () => newsletterUnsubscribe,
  onConfigChange: () => onConfigChange,
  register: () => register,
  removeCartItem: () => removeCartItem,
  removeWishlistProduct: () => removeWishlistProduct,
  resetPassword: () => resetPassword,
  searchProducts: () => searchProducts,
  searchSuggestedProducts: () => searchSuggestedProducts,
  sendContactForm: () => sendContactForm,
  setCurrentBillingAddress: () => setCurrentBillingAddress,
  setCurrentCurrency: () => setCurrentCurrency,
  setCurrentLanguage: () => setCurrentLanguage,
  setCurrentPaymentMethod: () => setCurrentPaymentMethod,
  setCurrentShippingAddress: () => setCurrentShippingAddress,
  setCurrentShippingMethod: () => setCurrentShippingMethod,
  setDefaultCustomerBillingAddress: () => setDefaultCustomerBillingAddress,
  setDefaultCustomerPaymentMethod: () => setDefaultCustomerPaymentMethod,
  setDefaultCustomerShippingAddress: () => setDefaultCustomerShippingAddress,
  setup: () => setup,
  update: () => update,
  updateCustomerAddress: () => updateCustomerAddress,
  updateEmail: () => updateEmail,
  updatePassword: () => updatePassword,
  updateProfile: () => updateProfile
});
module.exports = __toCommonJS(src_exports);

// packages/shopware-6-client/src/apiService.ts
var import_axios2 = __toESM(require("axios"));

// packages/shopware-6-client/src/interceptors/errorInterceptor.ts
var isApiError = (statusCode) => {
  if (statusCode != 408 && statusCode.toString().startsWith("4") || statusCode == 500) {
    return true;
  }
  return false;
};
var extractApiErrorStatusCode = (error) => {
  return error.response && error.response.status || guessTheStatusCodeFromTheMessage(error.message);
};
var guessTheStatusCodeFromTheMessage = (message) => {
  if (typeof message === "string" && message.startsWith("timeout of")) {
    return 408;
  }
  if (typeof message === "string" && message.startsWith("Network Error")) {
    return 0;
  }
  return 500;
};
var extractApiErrorMessage = (error) => {
  var _a, _b;
  return ((_b = (_a = error.response) == null ? void 0 : _a.data) == null ? void 0 : _b.errors) || [];
};
var extractNotApiErrorMessage = (error) => [
  {
    detail: error.message,
    status: "",
    code: "",
    title: "",
    meta: {},
    source: {}
  }
];
function errorInterceptor(error) {
  return __async(this, null, function* () {
    const statusCode = extractApiErrorStatusCode(error);
    const clientApiError = {
      messages: isApiError(statusCode) ? extractApiErrorMessage(error) : extractNotApiErrorMessage(error),
      statusCode
    };
    return Promise.reject(clientApiError);
  });
}

// packages/shopware-6-client/src/helpers/context.ts
function extractContextToken(response) {
  return response.data["sw-context-token"] || response.data["contextToken"] || response.headers["sw-context-token"];
}

// packages/shopware-6-client/src/interceptors/responseInterceptor.ts
function createResponseInterceptor(update2) {
  return function(response) {
    const contextToken = extractContextToken(response);
    contextToken && update2({ contextToken }, response.config);
    return response;
  };
}

// packages/commons/compatibility.json
var shopwareApiVersion = "6.4";
var instances = {
  "6.3": {
    domain: "https://pwa-demo-api.shopware.com/prev/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  },
  "6.4": {
    domain: "https://pwa-demo-api.shopware.com/trunk/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  },
  canary: {
    domain: "https://pwa-demo-api.shopware.com/trunk/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  }
};
var docVersions = [
  {
    text: "CHANGELOG",
    link: "https://github.com/vuestorefront/shopware-pwa/blob/master/CHANGELOG.md"
  },
  {
    text: "current",
    link: "https://shopware-pwa-docs.vuestorefront.io"
  },
  {
    text: "v0.10",
    link: "https://v0.10.shopware-pwa-docs.vuestorefront.io"
  },
  {
    text: "v0.9",
    link: "https://v0.9.shopware-pwa-docs.vuestorefront.io"
  }
];
var compatibility_default = {
  shopwareApiVersion,
  instances,
  docVersions
};

// packages/commons/src/defaultConfig.ts
var import_merge = __toESM(require("lodash/merge"));
var import_axios = __toESM(require("axios"));
var defaultPwaConfigFile = {
  shopwareEndpoint: compatibility_default.instances[compatibility_default.shopwareApiVersion].domain,
  shopwareAccessToken: compatibility_default.instances[compatibility_default.shopwareApiVersion].apiKey,
  theme: "@shopware-pwa/default-theme",
  shopwareApiClient: {
    timeout: 1e4
  }
};

// packages/shopware-6-client/src/settings.ts
var defaultConfig = {
  endpoint: defaultPwaConfigFile.shopwareEndpoint,
  accessToken: defaultPwaConfigFile.shopwareAccessToken,
  contextToken: "",
  languageId: "",
  defaultPaginationLimit: 10,
  timeout: 1e4
};

// packages/shopware-6-client/src/helpers/queryParamsBuilder.ts
var import_query_string = __toESM(require("query-string"));
var ARRAY_FORMAT = "separator";
var ARRAY_FORMAT_SEPARATOR = "|";
var SKIP_NULL = true;
var SORT = false;
var getQueryString = (params) => typeof params === "string" ? params : import_query_string.default.stringify(params, {
  arrayFormat: ARRAY_FORMAT,
  arrayFormatSeparator: ARRAY_FORMAT_SEPARATOR,
  skipNull: SKIP_NULL,
  sort: SORT
});

// packages/shopware-6-client/src/apiService.ts
function _createInstance(initialConfig = {}) {
  const callbackMethods = [];
  let clientConfig = {};
  const apiService = import_axios2.default.create();
  function reloadConfiguration() {
    apiService.defaults.baseURL = clientConfig.endpoint;
    if (clientConfig.timeout) {
      apiService.defaults.timeout = typeof clientConfig.timeout === "number" && clientConfig.timeout || typeof clientConfig.timeout === "string" && parseInt(clientConfig.timeout) || 0;
    }
    apiService.defaults.headers.common["sw-include-seo-urls"] = "true";
    apiService.defaults.headers.common["sw-access-key"] = clientConfig.accessToken;
    apiService.defaults.paramsSerializer = getQueryString;
    if (clientConfig.contextToken) {
      apiService.defaults.headers.common["sw-context-token"] = clientConfig.contextToken;
    } else {
      delete apiService.defaults.headers.common["sw-context-token"];
    }
    if (clientConfig.languageId) {
      apiService.defaults.headers.common["sw-language-id"] = clientConfig.languageId;
    } else {
      delete apiService.defaults.headers.common["sw-language-id"];
    }
  }
  function onConfigChange2(fn) {
    callbackMethods.push(fn);
  }
  const setup2 = function(config2 = {}) {
    clientConfig = Object.assign(clientConfig, defaultConfig, config2);
    reloadConfiguration();
  };
  setup2(initialConfig);
  const update2 = function(config2, responseConfig) {
    clientConfig = Object.assign(clientConfig, config2);
    if (process.env.NODE_ENV !== "production" && !callbackMethods.length && responseConfig) {
      console.warn(`[shopware-6-api] After calling API method ${responseConfig.url} there is no "onConfigChange" listener. See https://shopware-pwa-docs.vuestorefront.io/landing/fundamentals/security.html#context-awareness`);
    }
    callbackMethods.forEach((fn) => fn({ config: clientConfig }));
    reloadConfiguration();
  };
  const invoke = {
    post: apiService.post,
    put: apiService.put,
    get: apiService.get,
    patch: apiService.patch,
    delete: apiService.delete
  };
  apiService.interceptors.response.use(createResponseInterceptor(update2), errorInterceptor);
  return {
    onConfigChange: onConfigChange2,
    config: clientConfig,
    setup: setup2,
    update: update2,
    invoke,
    defaults: apiService.defaults,
    _axiosInstance: apiService
  };
}
function createInstance(initialConfig = {}) {
  const {
    onConfigChange: onConfigChange2,
    config: config2,
    setup: setup2,
    update: update2,
    invoke,
    defaults,
    _axiosInstance
  } = _createInstance(initialConfig);
  return {
    onConfigChange: onConfigChange2,
    config: config2,
    setup: setup2,
    update: (config3 = {}) => {
      update2(config3);
    },
    invoke,
    defaults,
    _axiosInstance
  };
}
var defaultInstance = createInstance();

// packages/shopware-6-client/src/endpoints.ts
var getCategoryEndpoint = () => `/store-api/category`;
var getCategoryDetailsEndpoint = (categoryId) => `/store-api/category/${categoryId}`;
var getLandingPageDetailsEndpoint = (landingPageId) => `/store-api/landing-page/${landingPageId}`;
var getProductListingEndpoint = (categoryId) => `/store-api/product-listing/${categoryId}`;
var getProductEndpoint = () => `/store-api/product`;
var getProductDetailsEndpoint = (productId) => `/store-api/product/${productId}`;
var getProductReviewsEndpoint = (productId) => `/store-api/product/${productId}/reviews`;
var getSuggestSearchEndpoint = () => `/store-api/search-suggest`;
var getSearchEndpoint = () => `/store-api/search`;
var getCustomerAddAddressEndpoint = () => `/store-api/account/address`;
var getCustomerAddressEndpoint = (addressId) => addressId ? `/store-api/account/address/${addressId}` : "/store-api/account/list-address";
var getCustomerDefaultAddressEndpoint = (type, addressId) => `/store-api/account/address/default-${type}/${addressId}`;
var getCustomerDefaultBillingAddressEndpoint = (addressId) => getCustomerDefaultAddressEndpoint("billing", addressId);
var getCustomerDefaultShippingAddressEndpoint = (addressId) => getCustomerDefaultAddressEndpoint("shipping", addressId);
var getCustomerEndpoint = () => `/store-api/account/customer`;
var getCustomerRegisterEndpoint = () => `/store-api/account/register`;
var getCustomerDetailsUpdateEndpoint = () => `/store-api/account/change-profile`;
var getCustomerLoginEndpoint = () => `/store-api/account/login`;
var getCustomerLogoutEndpoint = () => `/store-api/account/logout`;
var getCustomerOrderEndpoint = () => `/store-api/order`;
var getCustomerUpdateEmailEndpoint = () => `/store-api/account/change-email`;
var getCustomerUpdatePasswordEndpoint = () => `/store-api/account/change-password`;
var getCustomerResetPasswordEndpoint = () => `/store-api/account/recovery-password`;
var getConfirmPasswordResetEndpoint = () => `/store-api/account/recovery-password-confirm`;
var getCustomerAccountConfirmEndpoint = () => `/store-api/account/register-confirm`;
var getCustomerUpdatePaymentMethodEndpoint = (paymentMethodId) => `/account/change-payment-method/${paymentMethodId}`;
var getCheckoutCartEndpoint = () => `/store-api/checkout/cart`;
var getCheckoutCartLineItemEndpoint = () => `/store-api/checkout/cart/line-item`;
var getCheckoutOrderEndpoint = () => `/store-api/checkout/order`;
var getCancelOrderEndpoint = () => `/store-api/order/state/cancel`;
var getChangeOrderPaymentMethodEndpoint = () => `/store-api/order/payment`;
var getContextEndpoint = () => `/store-api/context`;
var getContextCurrencyEndpoint = () => `/store-api/currency`;
var getContextLanguageEndpoint = () => `/store-api/language`;
var getContextCountryEndpoint = () => `/store-api/country`;
var getContextPaymentMethodEndpoint = () => `/store-api/payment-method`;
var getContextShippingMethodEndpoint = () => `/store-api/shipping-method`;
var getContextSalutationEndpoint = () => `/store-api/salutation`;
var getNewsletterSubscribeEndpoint = () => `/newsletter/subscribe`;
var getNewsletterUnsubscribeEndpoint = () => `/newsletter/unsubscribe`;
var getNewsletterRecipientEnpoint = () => `/store-api/account/newsletter-recipient`;
var getPageResolverEndpoint = () => `/store-api/pwa/page`;
var getSeoUrlEndpoint = () => "/store-api/seo-url";
var getStoreNavigationEndpoint = (requestActiveId, requestRootId) => `/store-api/navigation/${requestActiveId}/${requestRootId}`;
var getContactFormEndpoint = () => `/store-api/contact-form`;
var handlePaymentEndpoint = () => `/store-api/handle-payment`;
var getStoreNewsletterSubscribeEndpoint = () => `/store-api/newsletter/subscribe`;
var getStoreNewsletterConfirmEndpoint = () => `/store-api/newsletter/confirm`;
var getStoreNewsletterUnsubscribeEndpoint = () => `/store-api/newsletter/unsubscribe`;
var getGetWishlistProductsEndpoint = () => `/store-api/customer/wishlist`;
var getAddWishlistProductEndpoint = (productId) => `/store-api/customer/wishlist/add/${productId}`;
var getRemoveWishlistProductEndpoint = (productId) => `/store-api/customer/wishlist/delete/${productId}`;
var getMergeWishlistProductsEndpoint = () => `/store-api/customer/wishlist/merge`;
var getCustomerDeleteEndpoint = () => `/store-api/account/customer`;

// packages/shopware-6-client/src/services/categoryService.ts
function getCategories(_0) {
  return __async(this, arguments, function* (searchCriteria, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getCategoryEndpoint(), searchCriteria);
    return resp.data;
  });
}
function getCategory(_0) {
  return __async(this, arguments, function* (categoryId, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.get(getCategoryDetailsEndpoint(categoryId));
    return resp.data;
  });
}

// packages/shopware-6-client/src/services/productService.ts
function getProducts(_0) {
  return __async(this, arguments, function* (criteria, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(`${getProductEndpoint()}`, __spreadValues({}, criteria || {}));
    return resp.data;
  });
}
function getCategoryProducts(_0, _1) {
  return __async(this, arguments, function* (categoryId, criteria, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(`${getProductListingEndpoint(categoryId)}`, criteria);
    return resp.data;
  });
}
function getProduct(_0) {
  return __async(this, arguments, function* (productId, params = null, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getProductDetailsEndpoint(productId), params);
    return resp.data;
  });
}
function addProductReview(_0, _1) {
  return __async(this, arguments, function* (productId, productReviewData, contextInstance = defaultInstance) {
    yield contextInstance.invoke.post(`${getProductDetailsEndpoint(productId)}/review`, productReviewData);
  });
}
function getProductReviews(_0, _1) {
  return __async(this, arguments, function* (productId, criteria, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(`${getProductReviewsEndpoint(productId)}`, __spreadValues({}, criteria || {}));
    return resp.data;
  });
}

// packages/shopware-6-client/src/services/customerService.ts
function register(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getCustomerRegisterEndpoint(), params);
    return resp.data;
  });
}
function login() {
  return __async(this, arguments, function* ({ username, password } = {}, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getCustomerLoginEndpoint(), {
      username,
      password
    });
    const contextToken = resp.data["sw-context-token"] || resp.data["contextToken"];
    return { contextToken };
  });
}
function logout() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    yield contextInstance.invoke.post(getCustomerLogoutEndpoint());
  });
}
function deleteAccount() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    yield contextInstance.invoke.delete(getCustomerDeleteEndpoint());
  });
}
function getCustomer() {
  return __async(this, arguments, function* (parameters = {}, contextInstance = defaultInstance) {
    try {
      const resp = yield contextInstance.invoke.post(getCustomerEndpoint(), parameters);
      return resp.data;
    } catch (e) {
      if (e.statusCode === 403)
        return null;
      throw new Error("Unexpected getCustomerResponse. " + e);
    }
  });
}
function getCustomerAddresses() {
  return __async(this, arguments, function* (parameters = {}, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getCustomerAddressEndpoint(), parameters);
    return resp.data;
  });
}
function getCustomerOrders() {
  return __async(this, arguments, function* (parameters = {}, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getCustomerOrderEndpoint(), parameters);
    return resp.data.orders;
  });
}
function getCustomerAddress(_0) {
  return __async(this, arguments, function* (addressId, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.get(getCustomerAddressEndpoint(addressId));
    return resp.data.data;
  });
}
function createCustomerAddress(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getCustomerAddAddressEndpoint(), params);
    return resp.data;
  });
}
function updateCustomerAddress(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.patch(getCustomerAddressEndpoint(params.id), params);
    return resp.data;
  });
}
function deleteCustomerAddress(_0) {
  return __async(this, arguments, function* (addressId, contextInstance = defaultInstance) {
    yield contextInstance.invoke.delete(getCustomerAddressEndpoint(addressId));
  });
}
function setDefaultCustomerBillingAddress(_0) {
  return __async(this, arguments, function* (addressId, contextInstance = defaultInstance) {
    const response = yield contextInstance.invoke.patch(getCustomerDefaultBillingAddressEndpoint(addressId));
    return response.data;
  });
}
function setDefaultCustomerShippingAddress(_0) {
  return __async(this, arguments, function* (addressId, contextInstance = defaultInstance) {
    const response = yield contextInstance.invoke.patch(getCustomerDefaultShippingAddressEndpoint(addressId));
    return response.data;
  });
}
function updateEmail(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    yield contextInstance.invoke.post(getCustomerUpdateEmailEndpoint(), params);
  });
}
function updatePassword(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    yield contextInstance.invoke.post(getCustomerUpdatePasswordEndpoint(), params);
  });
}
function resetPassword(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    if (params && !params.storefrontUrl) {
      params.storefrontUrl = contextInstance.config.endpoint;
    }
    yield contextInstance.invoke.post(getCustomerResetPasswordEndpoint(), params);
  });
}
function confirmPasswordReset(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    if (!params)
      return;
    yield contextInstance.invoke.post(getConfirmPasswordResetEndpoint(), __spreadValues({
      newPasswordConfirm: params.newPassword
    }, params));
  });
}
function updateProfile(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    yield contextInstance.invoke.post(getCustomerDetailsUpdateEndpoint(), params);
  });
}
function confirmAccountRegistration(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    const response = yield contextInstance.invoke.post(getCustomerAccountConfirmEndpoint(), params);
    return response.data;
  });
}
function setDefaultCustomerPaymentMethod(_0) {
  return __async(this, arguments, function* (paymentMethodId, contextInstance = defaultInstance) {
    const response = yield contextInstance.invoke.post(getCustomerUpdatePaymentMethodEndpoint(paymentMethodId));
    return response.data;
  });
}
function isNewsletterSubscriber() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    const response = yield contextInstance.invoke.post(getNewsletterRecipientEnpoint());
    return response.data;
  });
}

// packages/shopware-6-client/src/services/contextService.ts
function updateContext(params, contextInstance) {
  return __async(this, null, function* () {
    const resp = yield contextInstance.invoke.patch(getContextEndpoint(), params);
    const contextToken = extractContextToken(resp);
    return { contextToken };
  });
}
function getSessionContext() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    const { data } = yield contextInstance.invoke.get(getContextEndpoint());
    return data;
  });
}
function setCurrentShippingAddress(shippingAddressId, contextInstance = defaultInstance) {
  return updateContext({ shippingAddressId }, contextInstance);
}
function setCurrentBillingAddress(billingAddressId, contextInstance = defaultInstance) {
  return updateContext({ billingAddressId }, contextInstance);
}
function getAvailableCurrencies() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    const { data } = yield contextInstance.invoke.get(getContextCurrencyEndpoint());
    return data;
  });
}
function setCurrentCurrency(_0) {
  return __async(this, arguments, function* (newCurrencyID, contextInstance = defaultInstance) {
    let params = { currencyId: newCurrencyID };
    const resp = yield updateContext(params, contextInstance);
    return resp;
  });
}
function getAvailableLanguages() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    const { data } = yield contextInstance.invoke.get(getContextLanguageEndpoint());
    return data;
  });
}
function setCurrentLanguage(_0) {
  return __async(this, arguments, function* (newLanguageId, contextInstance = defaultInstance) {
    let params = { languageId: newLanguageId };
    const resp = yield updateContext(params, contextInstance);
    return resp;
  });
}
function getAvailableCountries() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    const { data } = yield contextInstance.invoke.get(getContextCountryEndpoint());
    return data;
  });
}
function getAvailableSalutations() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.get(getContextSalutationEndpoint());
    return resp.data;
  });
}
function getAvailablePaymentMethods() {
  return __async(this, arguments, function* (contextInstance = defaultInstance, params = {}) {
    const resp = yield contextInstance.invoke.get(getContextPaymentMethodEndpoint(), {
      params
    });
    return resp.data;
  });
}
function getPaymentMethodDetails(_0) {
  return __async(this, arguments, function* (paymentId, contextInstance = defaultInstance) {
    var _a;
    const { data } = yield contextInstance.invoke.get(getContextPaymentMethodEndpoint(), {
      params: {
        "filter[id]": paymentId
      }
    });
    return (_a = data == null ? void 0 : data.elements) == null ? void 0 : _a[0];
  });
}
function setCurrentPaymentMethod(_0) {
  return __async(this, arguments, function* (newPaymentMethodId, contextInstance = defaultInstance) {
    let params = { paymentMethodId: newPaymentMethodId };
    const resp = yield updateContext(params, contextInstance);
    return resp;
  });
}
function getAvailableShippingMethods() {
  return __async(this, arguments, function* (contextInstance = defaultInstance, params = {}) {
    const resp = yield contextInstance.invoke.get(getContextShippingMethodEndpoint(), {
      params
    });
    return resp.data;
  });
}
function getShippingMethodDetails(_0) {
  return __async(this, arguments, function* (shippingId, contextInstance = defaultInstance) {
    var _a;
    const { data } = yield contextInstance.invoke.get(getContextShippingMethodEndpoint(), {
      params: {
        "filter[id]": shippingId
      }
    });
    return (_a = data == null ? void 0 : data.elements) == null ? void 0 : _a[0];
  });
}
function setCurrentShippingMethod(_0) {
  return __async(this, arguments, function* (newShippingMethodId, contextInstance = defaultInstance) {
    let params = { shippingMethodId: newShippingMethodId };
    const resp = yield updateContext(params, contextInstance);
    return resp;
  });
}
function getUserCountry(_0) {
  return __async(this, arguments, function* (countryId, contextInstance = defaultInstance) {
    var _a;
    const { data } = yield contextInstance.invoke.get(getContextCountryEndpoint(), {
      params: {
        "filter[id]": countryId
      }
    });
    return (_a = data == null ? void 0 : data.elements) == null ? void 0 : _a[0];
  });
}
function getUserSalutation(_0) {
  return __async(this, arguments, function* (salutationId, contextInstance = defaultInstance) {
    var _a;
    const { data } = yield contextInstance.invoke.get(getContextSalutationEndpoint(), {
      params: {
        "filter[id]": salutationId
      }
    });
    return (_a = data == null ? void 0 : data.elements) == null ? void 0 : _a[0];
  });
}

// packages/shopware-6-client/src/services/cartService.ts
function clearCart() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getCheckoutCartEndpoint());
    let contextToken = resp.data["sw-context-token"];
    return { contextToken };
  });
}
function getCart() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.get(getCheckoutCartEndpoint());
    return resp.data;
  });
}
function addProductToCart(_0, _1) {
  return __async(this, arguments, function* (productId, quantity, contextInstance = defaultInstance) {
    const qty = quantity || 1;
    const item = {
      quantity: qty,
      type: "product",
      referencedId: productId,
      id: productId
    };
    const resp = yield contextInstance.invoke.post(getCheckoutCartLineItemEndpoint(), {
      items: [item]
    });
    return resp.data;
  });
}
function changeCartItemQuantity(_0) {
  return __async(this, arguments, function* (itemId, newQuantity = 1, contextInstance = defaultInstance) {
    let params = {
      items: [
        {
          id: itemId,
          quantity: parseInt(newQuantity.toString(), 10)
        }
      ]
    };
    const resp = yield contextInstance.invoke.patch(getCheckoutCartLineItemEndpoint(), params);
    return resp.data;
  });
}
function removeCartItem(_0) {
  return __async(this, arguments, function* (itemId, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.delete(`${getCheckoutCartLineItemEndpoint()}?ids[]=${itemId}`);
    return resp.data;
  });
}
function addPromotionCode(_0) {
  return __async(this, arguments, function* (promotionCode, contextInstance = defaultInstance) {
    const item = {
      type: "promotion",
      referencedId: promotionCode
    };
    const resp = yield contextInstance.invoke.post(getCheckoutCartLineItemEndpoint(), {
      items: [item]
    });
    return resp.data;
  });
}
function addCartItems(_0) {
  return __async(this, arguments, function* (items, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getCheckoutCartLineItemEndpoint(), {
      items
    });
    return resp.data;
  });
}

// packages/shopware-6-client/src/services/navigationService.ts
function getStoreNavigation(_0) {
  return __async(this, arguments, function* ({
    requestActiveId,
    requestRootId,
    depth,
    buildTree,
    searchCriteria
  }, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getStoreNavigationEndpoint(requestActiveId, requestRootId), __spreadValues(__spreadValues({}, searchCriteria || {}), {
      depth,
      buildTree
    }));
    return resp.data;
  });
}

// packages/shopware-6-client/src/services/pluginService.ts
function invokePost({
  address,
  payload
}, contextInstance = defaultInstance) {
  return contextInstance.invoke.post(address, payload);
}
function invokeGet({ address }, contextInstance = defaultInstance) {
  return contextInstance.invoke.get(address);
}

// packages/shopware-6-client/src/services/pageService.ts
function getCmsPage(_0, _1) {
  return __async(this, arguments, function* (path, criteria, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getPageResolverEndpoint(), __spreadValues({
      path
    }, criteria));
    return resp.data;
  });
}
function getLandingPage(_0, _1) {
  return __async(this, arguments, function* (landingPageId, params, contextInstance = defaultInstance) {
    const endpoint = getLandingPageDetailsEndpoint(landingPageId);
    const response = yield contextInstance.invoke.post(endpoint, params);
    return response == null ? void 0 : response.data;
  });
}
function getSeoUrls(_0, _1) {
  return __async(this, arguments, function* (entityId, languageId, contextInstance = defaultInstance) {
    if (languageId) {
      contextInstance.defaults.headers.common["sw-language-id"] = languageId;
    }
    const resp = yield contextInstance.invoke.post(getSeoUrlEndpoint(), {
      filter: [
        {
          type: "equals",
          field: "foreignKey",
          value: entityId
        }
      ],
      includes: {
        seo_url: ["seoPathInfo"]
      }
    });
    return resp.data;
  });
}
function getSeoUrl(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    const seoUrlResponse = yield invokePost({
      address: getSeoUrlEndpoint(),
      payload: params
    }, contextInstance);
    return seoUrlResponse.data;
  });
}

// packages/shopware-6-client/src/services/checkoutService.ts
function createOrder(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getCheckoutOrderEndpoint(), params);
    return resp.data;
  });
}
function handlePayment(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    if (!(params == null ? void 0 : params.orderId)) {
      throw new Error("handlePayment method requires orderId");
    }
    if (navigator == null ? void 0 : navigator.userAgent.includes("WebKit")) {
      if (typeof sessionStorage !== "undefined") {
        sessionStorage.setItem("sw-context-token", contextInstance.config.contextToken);
      }
    }
    const resp = yield contextInstance.invoke.get(handlePaymentEndpoint(), {
      params
    });
    return resp.data;
  });
}
function getOrderDetails(_0, _1) {
  return __async(this, arguments, function* (orderId, params, contextInstance = defaultInstance) {
    var _a, _b, _c;
    const resp = yield contextInstance.invoke.post(getCustomerOrderEndpoint(), Object.assign({}, params, {
      filter: [
        {
          type: "equals" /* EQUALS */,
          field: "id",
          value: orderId
        }
      ]
    }));
    return (_c = (_b = (_a = resp.data) == null ? void 0 : _a.orders) == null ? void 0 : _b.elements) == null ? void 0 : _c[0];
  });
}
function cancelOrder(_0) {
  return __async(this, arguments, function* (orderId, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getCancelOrderEndpoint(), {
      orderId
    });
    return resp.data;
  });
}
function changeOrderPaymentMethod(_0, _1) {
  return __async(this, arguments, function* (orderId, paymentMethodId, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getChangeOrderPaymentMethodEndpoint(), {
      orderId,
      paymentMethodId
    });
    return resp.data;
  });
}

// packages/shopware-6-client/src/services/searchService.ts
function searchProducts(_0) {
  return __async(this, arguments, function* (criteria, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(`${getSearchEndpoint()}?search=${encodeURIComponent((criteria == null ? void 0 : criteria.query) || "")}`, criteria);
    return resp.data;
  });
}
function searchSuggestedProducts(_0) {
  return __async(this, arguments, function* (criteria, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(`${getSuggestSearchEndpoint()}?search=${encodeURIComponent((criteria == null ? void 0 : criteria.query) || "")}`, criteria);
    return resp.data;
  });
}

// packages/shopware-6-client/src/services/formsService.ts
function sendContactForm(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    yield contextInstance.invoke.post(getContactFormEndpoint(), params);
  });
}
function newsletterSubscribe(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    yield contextInstance.invoke.post(getStoreNewsletterSubscribeEndpoint(), Object.assign({}, { option: "subscribe" }, params));
  });
}
function newsletterUnsubscribe(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    yield contextInstance.invoke.post(getStoreNewsletterUnsubscribeEndpoint(), params);
  });
}

// packages/shopware-6-client/src/services/wishlistService.ts
function addWishlistProduct(_0) {
  return __async(this, arguments, function* (productId, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getAddWishlistProductEndpoint(productId));
    return resp.data;
  });
}
function getWishlistProducts(_0) {
  return __async(this, arguments, function* (criteria, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getGetWishlistProductsEndpoint(), criteria);
    return resp.data;
  });
}
function removeWishlistProduct(_0) {
  return __async(this, arguments, function* (productId, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.delete(getRemoveWishlistProductEndpoint(productId));
    return resp.data;
  });
}
function mergeWishlistProducts(_0) {
  return __async(this, arguments, function* (productIds, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getMergeWishlistProductsEndpoint(), { productIds });
    return resp.data;
  });
}

// packages/shopware-6-client/src/index.ts
var config = defaultInstance.config;
var setup = defaultInstance.setup;
var update = defaultInstance.update;
var onConfigChange = defaultInstance.onConfigChange;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addCartItems,
  addProductReview,
  addProductToCart,
  addPromotionCode,
  addWishlistProduct,
  cancelOrder,
  changeCartItemQuantity,
  changeOrderPaymentMethod,
  clearCart,
  config,
  confirmAccountRegistration,
  confirmPasswordReset,
  createCustomerAddress,
  createInstance,
  createOrder,
  deleteAccount,
  deleteCustomerAddress,
  getAddWishlistProductEndpoint,
  getAvailableCountries,
  getAvailableCurrencies,
  getAvailableLanguages,
  getAvailablePaymentMethods,
  getAvailableSalutations,
  getAvailableShippingMethods,
  getCancelOrderEndpoint,
  getCart,
  getCategories,
  getCategory,
  getCategoryDetailsEndpoint,
  getCategoryEndpoint,
  getCategoryProducts,
  getChangeOrderPaymentMethodEndpoint,
  getCheckoutCartEndpoint,
  getCheckoutCartLineItemEndpoint,
  getCheckoutOrderEndpoint,
  getCmsPage,
  getConfirmPasswordResetEndpoint,
  getContactFormEndpoint,
  getContextCountryEndpoint,
  getContextCurrencyEndpoint,
  getContextEndpoint,
  getContextLanguageEndpoint,
  getContextPaymentMethodEndpoint,
  getContextSalutationEndpoint,
  getContextShippingMethodEndpoint,
  getCustomer,
  getCustomerAccountConfirmEndpoint,
  getCustomerAddAddressEndpoint,
  getCustomerAddress,
  getCustomerAddressEndpoint,
  getCustomerAddresses,
  getCustomerDefaultBillingAddressEndpoint,
  getCustomerDefaultShippingAddressEndpoint,
  getCustomerDeleteEndpoint,
  getCustomerDetailsUpdateEndpoint,
  getCustomerEndpoint,
  getCustomerLoginEndpoint,
  getCustomerLogoutEndpoint,
  getCustomerOrderEndpoint,
  getCustomerOrders,
  getCustomerRegisterEndpoint,
  getCustomerResetPasswordEndpoint,
  getCustomerUpdateEmailEndpoint,
  getCustomerUpdatePasswordEndpoint,
  getCustomerUpdatePaymentMethodEndpoint,
  getGetWishlistProductsEndpoint,
  getLandingPage,
  getLandingPageDetailsEndpoint,
  getMergeWishlistProductsEndpoint,
  getNewsletterRecipientEnpoint,
  getNewsletterSubscribeEndpoint,
  getNewsletterUnsubscribeEndpoint,
  getOrderDetails,
  getPageResolverEndpoint,
  getPaymentMethodDetails,
  getProduct,
  getProductDetailsEndpoint,
  getProductEndpoint,
  getProductListingEndpoint,
  getProductReviews,
  getProductReviewsEndpoint,
  getProducts,
  getRemoveWishlistProductEndpoint,
  getSearchEndpoint,
  getSeoUrl,
  getSeoUrlEndpoint,
  getSeoUrls,
  getSessionContext,
  getShippingMethodDetails,
  getStoreNavigation,
  getStoreNavigationEndpoint,
  getStoreNewsletterConfirmEndpoint,
  getStoreNewsletterSubscribeEndpoint,
  getStoreNewsletterUnsubscribeEndpoint,
  getSuggestSearchEndpoint,
  getUserCountry,
  getUserSalutation,
  getWishlistProducts,
  handlePayment,
  handlePaymentEndpoint,
  invokeGet,
  invokePost,
  isNewsletterSubscriber,
  login,
  logout,
  mergeWishlistProducts,
  newsletterSubscribe,
  newsletterUnsubscribe,
  onConfigChange,
  register,
  removeCartItem,
  removeWishlistProduct,
  resetPassword,
  searchProducts,
  searchSuggestedProducts,
  sendContactForm,
  setCurrentBillingAddress,
  setCurrentCurrency,
  setCurrentLanguage,
  setCurrentPaymentMethod,
  setCurrentShippingAddress,
  setCurrentShippingMethod,
  setDefaultCustomerBillingAddress,
  setDefaultCustomerPaymentMethod,
  setDefaultCustomerShippingAddress,
  setup,
  update,
  updateCustomerAddress,
  updateEmail,
  updatePassword,
  updateProfile
});
