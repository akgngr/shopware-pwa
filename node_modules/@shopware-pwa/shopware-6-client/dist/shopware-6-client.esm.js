// packages/shopware-6-client/src/apiService.ts
import axios2 from "axios";

// packages/shopware-6-client/src/interceptors/errorInterceptor.ts
var isApiError = (statusCode) => {
  if (statusCode != 408 && statusCode.toString().startsWith("4") || statusCode == 500) {
    return true;
  }
  return false;
};
var extractApiErrorStatusCode = (error) => {
  return error.response && error.response.status || guessTheStatusCodeFromTheMessage(error.message);
};
var guessTheStatusCodeFromTheMessage = (message) => {
  if (typeof message === "string" && message.startsWith("timeout of")) {
    return 408;
  }
  if (typeof message === "string" && message.startsWith("Network Error")) {
    return 0;
  }
  return 500;
};
var extractApiErrorMessage = (error) => {
  return error.response?.data?.errors || [];
};
var extractNotApiErrorMessage = (error) => [
  {
    detail: error.message,
    status: "",
    code: "",
    title: "",
    meta: {},
    source: {}
  }
];
async function errorInterceptor(error) {
  const statusCode = extractApiErrorStatusCode(error);
  const clientApiError = {
    messages: isApiError(statusCode) ? extractApiErrorMessage(error) : extractNotApiErrorMessage(error),
    statusCode
  };
  return Promise.reject(clientApiError);
}

// packages/shopware-6-client/src/helpers/context.ts
function extractContextToken(response) {
  return response.data["sw-context-token"] || response.data["contextToken"] || response.headers["sw-context-token"];
}

// packages/shopware-6-client/src/interceptors/responseInterceptor.ts
function createResponseInterceptor(update2) {
  return function(response) {
    const contextToken = extractContextToken(response);
    contextToken && update2({ contextToken }, response.config);
    return response;
  };
}

// packages/commons/compatibility.json
var shopwareApiVersion = "6.4";
var instances = {
  "6.3": {
    domain: "https://pwa-demo-api.shopware.com/prev/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  },
  "6.4": {
    domain: "https://pwa-demo-api.shopware.com/trunk/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  },
  canary: {
    domain: "https://pwa-demo-api.shopware.com/trunk/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  }
};
var docVersions = [
  {
    text: "CHANGELOG",
    link: "https://github.com/vuestorefront/shopware-pwa/blob/master/CHANGELOG.md"
  },
  {
    text: "current",
    link: "https://shopware-pwa-docs.vuestorefront.io"
  },
  {
    text: "v0.10",
    link: "https://v0.10.shopware-pwa-docs.vuestorefront.io"
  },
  {
    text: "v0.9",
    link: "https://v0.9.shopware-pwa-docs.vuestorefront.io"
  }
];
var compatibility_default = {
  shopwareApiVersion,
  instances,
  docVersions
};

// packages/commons/src/defaultConfig.ts
import merge from "lodash/merge";
import axios from "axios";
var defaultPwaConfigFile = {
  shopwareEndpoint: compatibility_default.instances[compatibility_default.shopwareApiVersion].domain,
  shopwareAccessToken: compatibility_default.instances[compatibility_default.shopwareApiVersion].apiKey,
  theme: "@shopware-pwa/default-theme",
  shopwareApiClient: {
    timeout: 1e4
  }
};

// packages/shopware-6-client/src/settings.ts
var defaultConfig = {
  endpoint: defaultPwaConfigFile.shopwareEndpoint,
  accessToken: defaultPwaConfigFile.shopwareAccessToken,
  contextToken: "",
  languageId: "",
  defaultPaginationLimit: 10,
  timeout: 1e4
};

// packages/shopware-6-client/src/helpers/queryParamsBuilder.ts
import queryString from "query-string";
var ARRAY_FORMAT = "separator";
var ARRAY_FORMAT_SEPARATOR = "|";
var SKIP_NULL = true;
var SORT = false;
var getQueryString = (params) => typeof params === "string" ? params : queryString.stringify(params, {
  arrayFormat: ARRAY_FORMAT,
  arrayFormatSeparator: ARRAY_FORMAT_SEPARATOR,
  skipNull: SKIP_NULL,
  sort: SORT
});

// packages/shopware-6-client/src/apiService.ts
function _createInstance(initialConfig = {}) {
  const callbackMethods = [];
  let clientConfig = {};
  const apiService = axios2.create();
  function reloadConfiguration() {
    apiService.defaults.baseURL = clientConfig.endpoint;
    if (clientConfig.timeout) {
      apiService.defaults.timeout = typeof clientConfig.timeout === "number" && clientConfig.timeout || typeof clientConfig.timeout === "string" && parseInt(clientConfig.timeout) || 0;
    }
    apiService.defaults.headers.common["sw-include-seo-urls"] = "true";
    apiService.defaults.headers.common["sw-access-key"] = clientConfig.accessToken;
    apiService.defaults.paramsSerializer = getQueryString;
    if (clientConfig.contextToken) {
      apiService.defaults.headers.common["sw-context-token"] = clientConfig.contextToken;
    } else {
      delete apiService.defaults.headers.common["sw-context-token"];
    }
    if (clientConfig.languageId) {
      apiService.defaults.headers.common["sw-language-id"] = clientConfig.languageId;
    } else {
      delete apiService.defaults.headers.common["sw-language-id"];
    }
  }
  function onConfigChange2(fn) {
    callbackMethods.push(fn);
  }
  const setup2 = function(config2 = {}) {
    clientConfig = Object.assign(clientConfig, defaultConfig, config2);
    reloadConfiguration();
  };
  setup2(initialConfig);
  const update2 = function(config2, responseConfig) {
    clientConfig = Object.assign(clientConfig, config2);
    if (process.env.NODE_ENV !== "production" && !callbackMethods.length && responseConfig) {
      console.warn(`[shopware-6-api] After calling API method ${responseConfig.url} there is no "onConfigChange" listener. See https://shopware-pwa-docs.vuestorefront.io/landing/fundamentals/security.html#context-awareness`);
    }
    callbackMethods.forEach((fn) => fn({ config: clientConfig }));
    reloadConfiguration();
  };
  const invoke = {
    post: apiService.post,
    put: apiService.put,
    get: apiService.get,
    patch: apiService.patch,
    delete: apiService.delete
  };
  apiService.interceptors.response.use(createResponseInterceptor(update2), errorInterceptor);
  return {
    onConfigChange: onConfigChange2,
    config: clientConfig,
    setup: setup2,
    update: update2,
    invoke,
    defaults: apiService.defaults,
    _axiosInstance: apiService
  };
}
function createInstance(initialConfig = {}) {
  const {
    onConfigChange: onConfigChange2,
    config: config2,
    setup: setup2,
    update: update2,
    invoke,
    defaults,
    _axiosInstance
  } = _createInstance(initialConfig);
  return {
    onConfigChange: onConfigChange2,
    config: config2,
    setup: setup2,
    update: (config3 = {}) => {
      update2(config3);
    },
    invoke,
    defaults,
    _axiosInstance
  };
}
var defaultInstance = createInstance();

// packages/shopware-6-client/src/endpoints.ts
var getCategoryEndpoint = () => `/store-api/category`;
var getCategoryDetailsEndpoint = (categoryId) => `/store-api/category/${categoryId}`;
var getLandingPageDetailsEndpoint = (landingPageId) => `/store-api/landing-page/${landingPageId}`;
var getProductListingEndpoint = (categoryId) => `/store-api/product-listing/${categoryId}`;
var getProductEndpoint = () => `/store-api/product`;
var getProductDetailsEndpoint = (productId) => `/store-api/product/${productId}`;
var getProductReviewsEndpoint = (productId) => `/store-api/product/${productId}/reviews`;
var getSuggestSearchEndpoint = () => `/store-api/search-suggest`;
var getSearchEndpoint = () => `/store-api/search`;
var getCustomerAddAddressEndpoint = () => `/store-api/account/address`;
var getCustomerAddressEndpoint = (addressId) => addressId ? `/store-api/account/address/${addressId}` : "/store-api/account/list-address";
var getCustomerDefaultAddressEndpoint = (type, addressId) => `/store-api/account/address/default-${type}/${addressId}`;
var getCustomerDefaultBillingAddressEndpoint = (addressId) => getCustomerDefaultAddressEndpoint("billing", addressId);
var getCustomerDefaultShippingAddressEndpoint = (addressId) => getCustomerDefaultAddressEndpoint("shipping", addressId);
var getCustomerEndpoint = () => `/store-api/account/customer`;
var getCustomerRegisterEndpoint = () => `/store-api/account/register`;
var getCustomerDetailsUpdateEndpoint = () => `/store-api/account/change-profile`;
var getCustomerLoginEndpoint = () => `/store-api/account/login`;
var getCustomerLogoutEndpoint = () => `/store-api/account/logout`;
var getCustomerOrderEndpoint = () => `/store-api/order`;
var getCustomerUpdateEmailEndpoint = () => `/store-api/account/change-email`;
var getCustomerUpdatePasswordEndpoint = () => `/store-api/account/change-password`;
var getCustomerResetPasswordEndpoint = () => `/store-api/account/recovery-password`;
var getConfirmPasswordResetEndpoint = () => `/store-api/account/recovery-password-confirm`;
var getCustomerAccountConfirmEndpoint = () => `/store-api/account/register-confirm`;
var getCustomerUpdatePaymentMethodEndpoint = (paymentMethodId) => `/account/change-payment-method/${paymentMethodId}`;
var getCheckoutCartEndpoint = () => `/store-api/checkout/cart`;
var getCheckoutCartLineItemEndpoint = () => `/store-api/checkout/cart/line-item`;
var getCheckoutOrderEndpoint = () => `/store-api/checkout/order`;
var getCancelOrderEndpoint = () => `/store-api/order/state/cancel`;
var getChangeOrderPaymentMethodEndpoint = () => `/store-api/order/payment`;
var getContextEndpoint = () => `/store-api/context`;
var getContextCurrencyEndpoint = () => `/store-api/currency`;
var getContextLanguageEndpoint = () => `/store-api/language`;
var getContextCountryEndpoint = () => `/store-api/country`;
var getContextPaymentMethodEndpoint = () => `/store-api/payment-method`;
var getContextShippingMethodEndpoint = () => `/store-api/shipping-method`;
var getContextSalutationEndpoint = () => `/store-api/salutation`;
var getNewsletterSubscribeEndpoint = () => `/newsletter/subscribe`;
var getNewsletterUnsubscribeEndpoint = () => `/newsletter/unsubscribe`;
var getNewsletterRecipientEnpoint = () => `/store-api/account/newsletter-recipient`;
var getPageResolverEndpoint = () => `/store-api/pwa/page`;
var getSeoUrlEndpoint = () => "/store-api/seo-url";
var getStoreNavigationEndpoint = (requestActiveId, requestRootId) => `/store-api/navigation/${requestActiveId}/${requestRootId}`;
var getContactFormEndpoint = () => `/store-api/contact-form`;
var handlePaymentEndpoint = () => `/store-api/handle-payment`;
var getStoreNewsletterSubscribeEndpoint = () => `/store-api/newsletter/subscribe`;
var getStoreNewsletterConfirmEndpoint = () => `/store-api/newsletter/confirm`;
var getStoreNewsletterUnsubscribeEndpoint = () => `/store-api/newsletter/unsubscribe`;
var getGetWishlistProductsEndpoint = () => `/store-api/customer/wishlist`;
var getAddWishlistProductEndpoint = (productId) => `/store-api/customer/wishlist/add/${productId}`;
var getRemoveWishlistProductEndpoint = (productId) => `/store-api/customer/wishlist/delete/${productId}`;
var getMergeWishlistProductsEndpoint = () => `/store-api/customer/wishlist/merge`;
var getCustomerDeleteEndpoint = () => `/store-api/account/customer`;

// packages/shopware-6-client/src/services/categoryService.ts
async function getCategories(searchCriteria, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getCategoryEndpoint(), searchCriteria);
  return resp.data;
}
async function getCategory(categoryId, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.get(getCategoryDetailsEndpoint(categoryId));
  return resp.data;
}

// packages/shopware-6-client/src/services/productService.ts
async function getProducts(criteria, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(`${getProductEndpoint()}`, {
    ...criteria || {}
  });
  return resp.data;
}
async function getCategoryProducts(categoryId, criteria, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(`${getProductListingEndpoint(categoryId)}`, criteria);
  return resp.data;
}
async function getProduct(productId, params = null, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getProductDetailsEndpoint(productId), params);
  return resp.data;
}
async function addProductReview(productId, productReviewData, contextInstance = defaultInstance) {
  await contextInstance.invoke.post(`${getProductDetailsEndpoint(productId)}/review`, productReviewData);
}
async function getProductReviews(productId, criteria, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(`${getProductReviewsEndpoint(productId)}`, {
    ...criteria || {}
  });
  return resp.data;
}

// packages/shopware-6-client/src/services/customerService.ts
async function register(params, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getCustomerRegisterEndpoint(), params);
  return resp.data;
}
async function login({ username, password } = {}, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getCustomerLoginEndpoint(), {
    username,
    password
  });
  const contextToken = resp.data["sw-context-token"] || resp.data["contextToken"];
  return { contextToken };
}
async function logout(contextInstance = defaultInstance) {
  await contextInstance.invoke.post(getCustomerLogoutEndpoint());
}
async function deleteAccount(contextInstance = defaultInstance) {
  await contextInstance.invoke.delete(getCustomerDeleteEndpoint());
}
async function getCustomer(parameters = {}, contextInstance = defaultInstance) {
  try {
    const resp = await contextInstance.invoke.post(getCustomerEndpoint(), parameters);
    return resp.data;
  } catch (e) {
    if (e.statusCode === 403)
      return null;
    throw new Error("Unexpected getCustomerResponse. " + e);
  }
}
async function getCustomerAddresses(parameters = {}, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getCustomerAddressEndpoint(), parameters);
  return resp.data;
}
async function getCustomerOrders(parameters = {}, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getCustomerOrderEndpoint(), parameters);
  return resp.data.orders;
}
async function getCustomerAddress(addressId, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.get(getCustomerAddressEndpoint(addressId));
  return resp.data.data;
}
async function createCustomerAddress(params, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getCustomerAddAddressEndpoint(), params);
  return resp.data;
}
async function updateCustomerAddress(params, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.patch(getCustomerAddressEndpoint(params.id), params);
  return resp.data;
}
async function deleteCustomerAddress(addressId, contextInstance = defaultInstance) {
  await contextInstance.invoke.delete(getCustomerAddressEndpoint(addressId));
}
async function setDefaultCustomerBillingAddress(addressId, contextInstance = defaultInstance) {
  const response = await contextInstance.invoke.patch(getCustomerDefaultBillingAddressEndpoint(addressId));
  return response.data;
}
async function setDefaultCustomerShippingAddress(addressId, contextInstance = defaultInstance) {
  const response = await contextInstance.invoke.patch(getCustomerDefaultShippingAddressEndpoint(addressId));
  return response.data;
}
async function updateEmail(params, contextInstance = defaultInstance) {
  await contextInstance.invoke.post(getCustomerUpdateEmailEndpoint(), params);
}
async function updatePassword(params, contextInstance = defaultInstance) {
  await contextInstance.invoke.post(getCustomerUpdatePasswordEndpoint(), params);
}
async function resetPassword(params, contextInstance = defaultInstance) {
  if (params && !params.storefrontUrl) {
    params.storefrontUrl = contextInstance.config.endpoint;
  }
  await contextInstance.invoke.post(getCustomerResetPasswordEndpoint(), params);
}
async function confirmPasswordReset(params, contextInstance = defaultInstance) {
  if (!params)
    return;
  await contextInstance.invoke.post(getConfirmPasswordResetEndpoint(), {
    newPasswordConfirm: params.newPassword,
    ...params
  });
}
async function updateProfile(params, contextInstance = defaultInstance) {
  await contextInstance.invoke.post(getCustomerDetailsUpdateEndpoint(), params);
}
async function confirmAccountRegistration(params, contextInstance = defaultInstance) {
  const response = await contextInstance.invoke.post(getCustomerAccountConfirmEndpoint(), params);
  return response.data;
}
async function setDefaultCustomerPaymentMethod(paymentMethodId, contextInstance = defaultInstance) {
  const response = await contextInstance.invoke.post(getCustomerUpdatePaymentMethodEndpoint(paymentMethodId));
  return response.data;
}
async function isNewsletterSubscriber(contextInstance = defaultInstance) {
  const response = await contextInstance.invoke.post(getNewsletterRecipientEnpoint());
  return response.data;
}

// packages/shopware-6-client/src/services/contextService.ts
async function updateContext(params, contextInstance) {
  const resp = await contextInstance.invoke.patch(getContextEndpoint(), params);
  const contextToken = extractContextToken(resp);
  return { contextToken };
}
async function getSessionContext(contextInstance = defaultInstance) {
  const { data } = await contextInstance.invoke.get(getContextEndpoint());
  return data;
}
function setCurrentShippingAddress(shippingAddressId, contextInstance = defaultInstance) {
  return updateContext({ shippingAddressId }, contextInstance);
}
function setCurrentBillingAddress(billingAddressId, contextInstance = defaultInstance) {
  return updateContext({ billingAddressId }, contextInstance);
}
async function getAvailableCurrencies(contextInstance = defaultInstance) {
  const { data } = await contextInstance.invoke.get(getContextCurrencyEndpoint());
  return data;
}
async function setCurrentCurrency(newCurrencyID, contextInstance = defaultInstance) {
  let params = { currencyId: newCurrencyID };
  const resp = await updateContext(params, contextInstance);
  return resp;
}
async function getAvailableLanguages(contextInstance = defaultInstance) {
  const { data } = await contextInstance.invoke.get(getContextLanguageEndpoint());
  return data;
}
async function setCurrentLanguage(newLanguageId, contextInstance = defaultInstance) {
  let params = { languageId: newLanguageId };
  const resp = await updateContext(params, contextInstance);
  return resp;
}
async function getAvailableCountries(contextInstance = defaultInstance) {
  const { data } = await contextInstance.invoke.get(getContextCountryEndpoint());
  return data;
}
async function getAvailableSalutations(contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.get(getContextSalutationEndpoint());
  return resp.data;
}
async function getAvailablePaymentMethods(contextInstance = defaultInstance, params = {}) {
  const resp = await contextInstance.invoke.get(getContextPaymentMethodEndpoint(), {
    params
  });
  return resp.data;
}
async function getPaymentMethodDetails(paymentId, contextInstance = defaultInstance) {
  const { data } = await contextInstance.invoke.get(getContextPaymentMethodEndpoint(), {
    params: {
      "filter[id]": paymentId
    }
  });
  return data?.elements?.[0];
}
async function setCurrentPaymentMethod(newPaymentMethodId, contextInstance = defaultInstance) {
  let params = { paymentMethodId: newPaymentMethodId };
  const resp = await updateContext(params, contextInstance);
  return resp;
}
async function getAvailableShippingMethods(contextInstance = defaultInstance, params = {}) {
  const resp = await contextInstance.invoke.get(getContextShippingMethodEndpoint(), {
    params
  });
  return resp.data;
}
async function getShippingMethodDetails(shippingId, contextInstance = defaultInstance) {
  const { data } = await contextInstance.invoke.get(getContextShippingMethodEndpoint(), {
    params: {
      "filter[id]": shippingId
    }
  });
  return data?.elements?.[0];
}
async function setCurrentShippingMethod(newShippingMethodId, contextInstance = defaultInstance) {
  let params = { shippingMethodId: newShippingMethodId };
  const resp = await updateContext(params, contextInstance);
  return resp;
}
async function getUserCountry(countryId, contextInstance = defaultInstance) {
  const { data } = await contextInstance.invoke.get(getContextCountryEndpoint(), {
    params: {
      "filter[id]": countryId
    }
  });
  return data?.elements?.[0];
}
async function getUserSalutation(salutationId, contextInstance = defaultInstance) {
  const { data } = await contextInstance.invoke.get(getContextSalutationEndpoint(), {
    params: {
      "filter[id]": salutationId
    }
  });
  return data?.elements?.[0];
}

// packages/shopware-6-client/src/services/cartService.ts
async function clearCart(contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getCheckoutCartEndpoint());
  let contextToken = resp.data["sw-context-token"];
  return { contextToken };
}
async function getCart(contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.get(getCheckoutCartEndpoint());
  return resp.data;
}
async function addProductToCart(productId, quantity, contextInstance = defaultInstance) {
  const qty = quantity || 1;
  const item = {
    quantity: qty,
    type: "product",
    referencedId: productId,
    id: productId
  };
  const resp = await contextInstance.invoke.post(getCheckoutCartLineItemEndpoint(), {
    items: [item]
  });
  return resp.data;
}
async function changeCartItemQuantity(itemId, newQuantity = 1, contextInstance = defaultInstance) {
  let params = {
    items: [
      {
        id: itemId,
        quantity: parseInt(newQuantity.toString(), 10)
      }
    ]
  };
  const resp = await contextInstance.invoke.patch(getCheckoutCartLineItemEndpoint(), params);
  return resp.data;
}
async function removeCartItem(itemId, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.delete(`${getCheckoutCartLineItemEndpoint()}?ids[]=${itemId}`);
  return resp.data;
}
async function addPromotionCode(promotionCode, contextInstance = defaultInstance) {
  const item = {
    type: "promotion",
    referencedId: promotionCode
  };
  const resp = await contextInstance.invoke.post(getCheckoutCartLineItemEndpoint(), {
    items: [item]
  });
  return resp.data;
}
async function addCartItems(items, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getCheckoutCartLineItemEndpoint(), {
    items
  });
  return resp.data;
}

// packages/shopware-6-client/src/services/navigationService.ts
async function getStoreNavigation({
  requestActiveId,
  requestRootId,
  depth,
  buildTree,
  searchCriteria
}, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getStoreNavigationEndpoint(requestActiveId, requestRootId), {
    ...searchCriteria || {},
    ...{
      depth,
      buildTree
    }
  });
  return resp.data;
}

// packages/shopware-6-client/src/services/pluginService.ts
function invokePost({
  address,
  payload
}, contextInstance = defaultInstance) {
  return contextInstance.invoke.post(address, payload);
}
function invokeGet({ address }, contextInstance = defaultInstance) {
  return contextInstance.invoke.get(address);
}

// packages/shopware-6-client/src/services/pageService.ts
async function getCmsPage(path, criteria, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getPageResolverEndpoint(), {
    path,
    ...criteria
  });
  return resp.data;
}
async function getLandingPage(landingPageId, params, contextInstance = defaultInstance) {
  const endpoint = getLandingPageDetailsEndpoint(landingPageId);
  const response = await contextInstance.invoke.post(endpoint, params);
  return response?.data;
}
async function getSeoUrls(entityId, languageId, contextInstance = defaultInstance) {
  if (languageId) {
    contextInstance.defaults.headers.common["sw-language-id"] = languageId;
  }
  const resp = await contextInstance.invoke.post(getSeoUrlEndpoint(), {
    filter: [
      {
        type: "equals",
        field: "foreignKey",
        value: entityId
      }
    ],
    includes: {
      seo_url: ["seoPathInfo"]
    }
  });
  return resp.data;
}
async function getSeoUrl(params, contextInstance = defaultInstance) {
  const seoUrlResponse = await invokePost({
    address: getSeoUrlEndpoint(),
    payload: params
  }, contextInstance);
  return seoUrlResponse.data;
}

// packages/shopware-6-client/src/services/checkoutService.ts
async function createOrder(params, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getCheckoutOrderEndpoint(), params);
  return resp.data;
}
async function handlePayment(params, contextInstance = defaultInstance) {
  if (!params?.orderId) {
    throw new Error("handlePayment method requires orderId");
  }
  if (navigator?.userAgent.includes("WebKit")) {
    if (typeof sessionStorage !== "undefined") {
      sessionStorage.setItem("sw-context-token", contextInstance.config.contextToken);
    }
  }
  const resp = await contextInstance.invoke.get(handlePaymentEndpoint(), {
    params
  });
  return resp.data;
}
async function getOrderDetails(orderId, params, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getCustomerOrderEndpoint(), Object.assign({}, params, {
    filter: [
      {
        type: "equals" /* EQUALS */,
        field: "id",
        value: orderId
      }
    ]
  }));
  return resp.data?.orders?.elements?.[0];
}
async function cancelOrder(orderId, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getCancelOrderEndpoint(), {
    orderId
  });
  return resp.data;
}
async function changeOrderPaymentMethod(orderId, paymentMethodId, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getChangeOrderPaymentMethodEndpoint(), {
    orderId,
    paymentMethodId
  });
  return resp.data;
}

// packages/shopware-6-client/src/services/searchService.ts
async function searchProducts(criteria, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(`${getSearchEndpoint()}?search=${encodeURIComponent(criteria?.query || "")}`, criteria);
  return resp.data;
}
async function searchSuggestedProducts(criteria, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(`${getSuggestSearchEndpoint()}?search=${encodeURIComponent(criteria?.query || "")}`, criteria);
  return resp.data;
}

// packages/shopware-6-client/src/services/formsService.ts
async function sendContactForm(params, contextInstance = defaultInstance) {
  await contextInstance.invoke.post(getContactFormEndpoint(), params);
}
async function newsletterSubscribe(params, contextInstance = defaultInstance) {
  await contextInstance.invoke.post(getStoreNewsletterSubscribeEndpoint(), Object.assign({}, { option: "subscribe" }, params));
}
async function newsletterUnsubscribe(params, contextInstance = defaultInstance) {
  await contextInstance.invoke.post(getStoreNewsletterUnsubscribeEndpoint(), params);
}

// packages/shopware-6-client/src/services/wishlistService.ts
async function addWishlistProduct(productId, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getAddWishlistProductEndpoint(productId));
  return resp.data;
}
async function getWishlistProducts(criteria, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getGetWishlistProductsEndpoint(), criteria);
  return resp.data;
}
async function removeWishlistProduct(productId, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.delete(getRemoveWishlistProductEndpoint(productId));
  return resp.data;
}
async function mergeWishlistProducts(productIds, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getMergeWishlistProductsEndpoint(), { productIds });
  return resp.data;
}

// packages/shopware-6-client/src/index.ts
var config = defaultInstance.config;
var setup = defaultInstance.setup;
var update = defaultInstance.update;
var onConfigChange = defaultInstance.onConfigChange;
export {
  addCartItems,
  addProductReview,
  addProductToCart,
  addPromotionCode,
  addWishlistProduct,
  cancelOrder,
  changeCartItemQuantity,
  changeOrderPaymentMethod,
  clearCart,
  config,
  confirmAccountRegistration,
  confirmPasswordReset,
  createCustomerAddress,
  createInstance,
  createOrder,
  deleteAccount,
  deleteCustomerAddress,
  getAddWishlistProductEndpoint,
  getAvailableCountries,
  getAvailableCurrencies,
  getAvailableLanguages,
  getAvailablePaymentMethods,
  getAvailableSalutations,
  getAvailableShippingMethods,
  getCancelOrderEndpoint,
  getCart,
  getCategories,
  getCategory,
  getCategoryDetailsEndpoint,
  getCategoryEndpoint,
  getCategoryProducts,
  getChangeOrderPaymentMethodEndpoint,
  getCheckoutCartEndpoint,
  getCheckoutCartLineItemEndpoint,
  getCheckoutOrderEndpoint,
  getCmsPage,
  getConfirmPasswordResetEndpoint,
  getContactFormEndpoint,
  getContextCountryEndpoint,
  getContextCurrencyEndpoint,
  getContextEndpoint,
  getContextLanguageEndpoint,
  getContextPaymentMethodEndpoint,
  getContextSalutationEndpoint,
  getContextShippingMethodEndpoint,
  getCustomer,
  getCustomerAccountConfirmEndpoint,
  getCustomerAddAddressEndpoint,
  getCustomerAddress,
  getCustomerAddressEndpoint,
  getCustomerAddresses,
  getCustomerDefaultBillingAddressEndpoint,
  getCustomerDefaultShippingAddressEndpoint,
  getCustomerDeleteEndpoint,
  getCustomerDetailsUpdateEndpoint,
  getCustomerEndpoint,
  getCustomerLoginEndpoint,
  getCustomerLogoutEndpoint,
  getCustomerOrderEndpoint,
  getCustomerOrders,
  getCustomerRegisterEndpoint,
  getCustomerResetPasswordEndpoint,
  getCustomerUpdateEmailEndpoint,
  getCustomerUpdatePasswordEndpoint,
  getCustomerUpdatePaymentMethodEndpoint,
  getGetWishlistProductsEndpoint,
  getLandingPage,
  getLandingPageDetailsEndpoint,
  getMergeWishlistProductsEndpoint,
  getNewsletterRecipientEnpoint,
  getNewsletterSubscribeEndpoint,
  getNewsletterUnsubscribeEndpoint,
  getOrderDetails,
  getPageResolverEndpoint,
  getPaymentMethodDetails,
  getProduct,
  getProductDetailsEndpoint,
  getProductEndpoint,
  getProductListingEndpoint,
  getProductReviews,
  getProductReviewsEndpoint,
  getProducts,
  getRemoveWishlistProductEndpoint,
  getSearchEndpoint,
  getSeoUrl,
  getSeoUrlEndpoint,
  getSeoUrls,
  getSessionContext,
  getShippingMethodDetails,
  getStoreNavigation,
  getStoreNavigationEndpoint,
  getStoreNewsletterConfirmEndpoint,
  getStoreNewsletterSubscribeEndpoint,
  getStoreNewsletterUnsubscribeEndpoint,
  getSuggestSearchEndpoint,
  getUserCountry,
  getUserSalutation,
  getWishlistProducts,
  handlePayment,
  handlePaymentEndpoint,
  invokeGet,
  invokePost,
  isNewsletterSubscriber,
  login,
  logout,
  mergeWishlistProducts,
  newsletterSubscribe,
  newsletterUnsubscribe,
  onConfigChange,
  register,
  removeCartItem,
  removeWishlistProduct,
  resetPassword,
  searchProducts,
  searchSuggestedProducts,
  sendContactForm,
  setCurrentBillingAddress,
  setCurrentCurrency,
  setCurrentLanguage,
  setCurrentPaymentMethod,
  setCurrentShippingAddress,
  setCurrentShippingMethod,
  setDefaultCustomerBillingAddress,
  setDefaultCustomerPaymentMethod,
  setDefaultCustomerShippingAddress,
  setup,
  update,
  updateCustomerAddress,
  updateEmail,
  updatePassword,
  updateProfile
};
