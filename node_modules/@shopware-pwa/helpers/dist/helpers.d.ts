import { Aggregations } from '@shopware-pwa/commons';
import { CalculatedPrice } from '@shopware-pwa/commons';
import { Category } from '@shopware-pwa/commons';
import { CmsBlock } from '@shopware-pwa/commons';
import { CmsPageResponse } from '@shopware-pwa/commons';
import { CmsSection } from '@shopware-pwa/commons';
import { CmsSlot } from '@shopware-pwa/commons';
import { Country } from '@shopware-pwa/commons';
import { Product } from '@shopware-pwa/commons';
import { Salutation } from '@shopware-pwa/commons';
import { SearchCriteria } from '@shopware-pwa/commons';

/**
 * Debouce helper to invoke a method with a delay
 *
 * @public
 */
export declare function debounce<T extends (...args: any[]) => any>(fn: T, delay?: number): T;

/**
 * Get URL for category.
 *
 * @beta
 */
export declare const getCategoryUrl: (category: Partial<Category>) => string;

/**
 * @public
 */
export declare function getCmsEntityByType(page?: CmsPageResponse | null): Product | Category | undefined;

/**
 * @beta
 */
export declare function getCmsLayoutConfiguration(content: CmsBlock | CmsSection): LayoutConfiguration;

/**
 * Gets the link of a cms slot
 *
 * @public
 */
export declare function getCmsLink(content?: Omit<CmsSlot, "data"> & {
    data?: {
        url?: string;
    };
}): String;

/**
 * Return the target attribute for the cms link
 *
 * @public
 */
export declare function getCmsLinkTarget(content?: Omit<CmsSlot, "data"> & {
    data?: {
        url?: string;
        newTab?: boolean;
    };
}): String;

/**
 * @public
 */
export declare function getCmsTechnicalPath(page: CmsPageResponse): string | undefined;

/**
 * @beta
 */
export declare function getListingFilters(aggregations: Aggregations | undefined | null): ListingFilter[];

/**
 * Get the calculated list price
 *
 * @returns (number|undefined)
 *
 * @beta
 */
export declare function getProductCalculatedListingPrice(product: Product): number | undefined;

/**
 * Get the calculated list price
 *
 * @returns (number|undefined)
 *
 * @beta
 */
export declare function getProductCalculatedPrice(product: Product): number | undefined;

/**
 * Get product free shipping property
 *
 * @public
 */
export declare function getProductFreeShipping(product?: Product): boolean;

/**
 * @beta
 */
export declare function getProductFromPrice(product: Product): number | undefined;

/**
 * gets the cover image
 *
 * @public
 */
export declare function getProductMainImageUrl(product: Product): string;

/**
 * Get the media gallery of a product as ui-interfaces
 *
 * @public
 */
export declare function getProductMediaGallery({ product, }?: {
    product?: Product;
}): UiMediaGalleryItem[];

/**
 * @beta
 */
export declare function getProductName({ product }?: {
    product?: Product;
}): string | null;

/**
 * Get product number propety
 *
 * @public
 */
export declare function getProductNumber(product: Product): string | null;

/**
 * Get product options as ui-interfaces
 *
 * @public
 */
export declare function getProductOptions({ product, }?: {
    product?: Product;
}): UiProductOption[];

/**
 * Get value of price discount
 *
 * @returns (number|undefined)
 *
 * @beta
 */
export declare function getProductPriceDiscount(product: Product): number | undefined;

/**
 * Get the percentage value of discount
 *
 * @returns (number|undefined)
 *
 * @beta
 */
export declare function getProductPriceDiscountPercentage(product: Product): number | undefined;

/**
 * Get product properties as ui-interfaces
 *
 * @public
 */
export declare function getProductProperties({ product, }?: {
    product?: Product;
}): UiProductProperty[];

/**
 * Get product qty steps
 *
 * @public
 */
export declare function getProductQtySteps(product: Product, availableStockParam?: number, qtySteps?: number): number[] | null;

/**
 * Get product rating average property
 *
 * @public
 */
export declare function getProductRatingAverage(product: Product): number | null;

/**
 * @beta
 */
export declare function getProductRealPrice(product: Product): CalculatedPrice | undefined;

/**
 * Format product reviews to ui-interfaces
 *
 * @public
 */
export declare function getProductReviews({ product, }?: {
    product?: Product;
}): UiProductReview[];

/**
 * get the thumbnail image URL with the smallest width
 *
 * @beta
 */
export declare function getProductThumbnailUrl(product: Product): string;

/**
 * Get the prices depending on quantity added to cart.
 * Tier prices can be set in `Advanced pricing` tab in `Product view` (admin panel)
 *
 * @returns TierPrice[]
 * @beta
 */
export declare function getProductTierPrices(product: Product): TierPrice[];

/**
 * Get product url. The priority is SEO url and then technical url.
 *
 * @public
 */
export declare function getProductUrl(product: Product | null): string;

/**
 * @beta
 */
export declare function getProductVariantsFromPrice(product: Product): number | undefined;

/**
 * Get translated property from the given object.
 *
 * @public
 */
export declare function getTranslatedProperty<T>(element: T, property: keyof T): string;

/**
 *
 * @beta
 */
export declare const isLinkCategory: (category: Partial<Category>) => boolean;

/**
 * @beta
 */
export declare function isProductSimple({ product, }?: {
    product?: Product;
}): boolean;

/**
 * @beta
 */
export declare interface LayoutConfiguration {
    layoutStyles: {
        backgroundColor: string | null;
        backgroundImage: string | null;
        marginBottom?: string | null | undefined;
        marginLeft?: string | null | undefined;
        marginRight?: string | null | undefined;
        marginTop?: string | null | undefined;
    };
    cssClasses: string | null;
}

/**
 * @public
 */
export declare interface ListingFilter {
    label: string;
    code: string;
    type?: "range" | "max";
    [key: string]: any;
}

/**
 * Helper for plugins to load external scripts for plugins
 *
 * @beta
 *
 */
export declare function loadScript(src: string): Promise<void>;

/**
 * Map available countries to (`name`: string | null, id: `string`) format
 *
 * @returns MappedCountries
 * @public
 **/
export declare function mapCountries(countries: Country[]): Array<{
    name: string | null;
    id: string;
}>;

/**
 * @public
 */
export declare interface MappedSalutation {
    name: string | null;
    id: string;
}

/**
 * Map available salutations to (`name`: string, `id`: string) format
 *
 * @returns MappedSalutations
 * @public
 **/
export declare function mapSalutations(salutations: Salutation[]): MappedSalutation[];

/**
 * @internal
 */
export declare function _parseUrlQuery(query: any): SearchCriteria;

/**
 * @beta
 */
export declare interface TierPrice {
    label: string;
    quantity: number;
    unitPrice: number;
}

/**
 * It creates new selected filters object based on the filter existence
 *
 * @public
 */
export declare function toggleSearchFilter(currentFilters: any, filter: ListingFilter): any;

/**
 * @public
 */
export declare interface UiMediaGalleryItem {
    icon: UiMediaGalleryItemUrl;
    mobile: UiMediaGalleryItemUrl;
    desktop: UiMediaGalleryItemUrl;
}

/**
 * @public
 */
export declare interface UiMediaGalleryItemUrl {
    url: string;
}

/**
 * @public
 */
export declare interface UiProductOption {
    label: string;
    value: string;
    code: string;
    color: string | null;
}

/**
 * @public
 */
export declare interface UiProductProperty {
    name: string;
    value: string | null;
}

/**
 * @public
 */
export declare interface UiProductReview {
    id: string;
    author: string;
    date: Date;
    message: string | null;
    rating: number | null;
}

export { }
