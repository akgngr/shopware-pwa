// packages/nuxt-module/src/defaultsConfigBuilder.ts
import { mergeWith, set, get } from "lodash";
import { getDefaultApiParams } from "@shopware-pwa/composables";
function _customizer(objValue, srcValue) {
  if (Array.isArray(objValue)) {
    return [.../* @__PURE__ */ new Set([...objValue, ...srcValue])];
  }
}
function _getDefaultConfig() {
  return JSON.parse(JSON.stringify(getDefaultApiParams()));
}
var finalConfig = _getDefaultConfig();
function defaultsConfigBuilder() {
  return {
    add: (key, config) => {
      const property = get(finalConfig, key);
      if (!property) {
        set(finalConfig, key, config);
      } else if (Array.isArray(property)) {
        const newArray = Array.isArray(config) ? config : [config];
        const combinedArray = [...property, ...newArray];
        set(finalConfig, key, [...new Set(combinedArray)]);
      } else {
        mergeWith(property, config, _customizer);
      }
      return defaultsConfigBuilder();
    },
    replace(key, value) {
      set(finalConfig, key, value);
      return defaultsConfigBuilder();
    },
    remove(key, value) {
      if (value) {
        const property = get(finalConfig, key);
        if (Array.isArray(property)) {
          const newValue = property.filter((item) => item !== value);
          set(finalConfig, key, newValue);
          return defaultsConfigBuilder();
        }
      }
      set(finalConfig, key, void 0);
      return defaultsConfigBuilder();
    },
    _resetToDefault: () => {
      finalConfig = _getDefaultConfig();
    },
    get: (key) => {
      return key ? get(finalConfig, key) : finalConfig;
    }
  };
}
export {
  defaultsConfigBuilder as default
};
