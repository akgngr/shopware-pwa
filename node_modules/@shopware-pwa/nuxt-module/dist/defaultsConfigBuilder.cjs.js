var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// packages/nuxt-module/src/defaultsConfigBuilder.ts
var defaultsConfigBuilder_exports = {};
__export(defaultsConfigBuilder_exports, {
  default: () => defaultsConfigBuilder
});
module.exports = __toCommonJS(defaultsConfigBuilder_exports);
var import_lodash = require("lodash");
var import_composables = require("@shopware-pwa/composables");
function _customizer(objValue, srcValue) {
  if (Array.isArray(objValue)) {
    return [.../* @__PURE__ */ new Set([...objValue, ...srcValue])];
  }
}
function _getDefaultConfig() {
  return JSON.parse(JSON.stringify((0, import_composables.getDefaultApiParams)()));
}
var finalConfig = _getDefaultConfig();
function defaultsConfigBuilder() {
  return {
    add: (key, config) => {
      const property = (0, import_lodash.get)(finalConfig, key);
      if (!property) {
        (0, import_lodash.set)(finalConfig, key, config);
      } else if (Array.isArray(property)) {
        const newArray = Array.isArray(config) ? config : [config];
        const combinedArray = [...property, ...newArray];
        (0, import_lodash.set)(finalConfig, key, [...new Set(combinedArray)]);
      } else {
        (0, import_lodash.mergeWith)(property, config, _customizer);
      }
      return defaultsConfigBuilder();
    },
    replace(key, value) {
      (0, import_lodash.set)(finalConfig, key, value);
      return defaultsConfigBuilder();
    },
    remove(key, value) {
      if (value) {
        const property = (0, import_lodash.get)(finalConfig, key);
        if (Array.isArray(property)) {
          const newValue = property.filter((item) => item !== value);
          (0, import_lodash.set)(finalConfig, key, newValue);
          return defaultsConfigBuilder();
        }
      }
      (0, import_lodash.set)(finalConfig, key, void 0);
      return defaultsConfigBuilder();
    },
    _resetToDefault: () => {
      finalConfig = _getDefaultConfig();
    },
    get: (key) => {
      return key ? (0, import_lodash.get)(finalConfig, key) : finalConfig;
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
