// packages/nuxt-module/src/extendNuxtConfig.ts
import { isArray, mergeWith } from "lodash";
function customizer(objValue, srcValue) {
  if (isArray(objValue)) {
    return objValue.concat(srcValue);
  }
}
var defaultConfig = {
  telemetry: false,
  vue: {
    config: {
      devtools: process.env.ENABLE_DEVTOOLS === "true" || process.env.NODE_ENV !== "production"
    }
  },
  env: {
    CHOKIDAR_USEPOLLING: process.env.NODE_ENV == "production" ? "0" : "1",
    EXPERIMENTAL_IMAGE_PROCESSING_SERVER: process.env.EXPERIMENTAL_IMAGE_PROCESSING_SERVER || "",
    NODE_ENV: process.env.NODE_ENV || "",
    ENABLE_DEVTOOLS: process.env.ENABLE_DEVTOOLS || ""
  },
  server: {
    port: process.env.PORT || 3e3,
    host: process.env.HOST || "0.0.0.0"
  },
  head: {
    title: "Shopware PWA",
    meta: [
      { hid: "project-type", name: "project-type", content: "shopware-pwa" },
      { charset: "utf-8" },
      { name: "viewport", content: "width=device-width, initial-scale=1" },
      { hid: "description", name: "description", content: "" },
      { name: "generator", content: "Vue Storefront 2" }
    ],
    link: [
      { rel: "icon", type: "image/x-icon", href: "/favicon.ico" },
      {
        rel: "preload",
        href: "https://fonts.googleapis.com/css?family=Raleway:300,400,400i,500,600,700%7CRoboto:300,300i,400,400i,500,700&display=swap",
        as: "style"
      },
      {
        rel: "stylesheet",
        href: "https://fonts.googleapis.com/css?family=Raleway:300,400,400i,500,600,700%7CRoboto:300,300i,400,400i,500,700&display=swap",
        media: "print",
        onload: "this.media='all'",
        once: true
      }
    ]
  },
  css: ["~assets/scss/main.scss"],
  plugins: [],
  components: false,
  buildModules: ["@nuxt/typescript-build", "@shopware-pwa/nuxt-module"],
  modules: [
    "@nuxtjs/axios",
    "@nuxtjs/pwa"
  ],
  axios: {},
  pwa: {
    manifest: {
      lang: "en"
    },
    workbox: {
      offlineStrategy: "StaleWhileRevalidate"
    }
  },
  build: {
    babel: {
      plugins: [["@babel/plugin-proposal-private-methods", { loose: true }]]
    }
  },
  render: {
    bundleRenderer: {
      runInNewContext: false
    }
  },
  generate: {
    exclude: [
      /^\/search/
    ]
  }
};
var configs = [defaultConfig];
function extendNuxtConfig(config) {
  configs.push(config);
  return configs.reduce((prev, next) => mergeWith(prev, next, customizer));
}
export {
  extendNuxtConfig as default
};
